Help on module libvirt:

NNAAMMEE
    libvirt

FFIILLEE
    /usr/lib64/python2.7/site-packages/libvirt.py

DDEESSCCRRIIPPTTIIOONN
    # WARNING WARNING WARNING WARNING
    #
    # This file is automatically written by generator.py. Any changes
    # made here will be lost.
    #
    # To change the manually written methods edit libvirt-override.py
    # To change the automatically written methods edit generator.py
    #
    # WARNING WARNING WARNING WARNING
    #
    #
    # Manually written part of python bindings for libvirt
    #

CCLLAASSSSEESS
    __builtin__.object
        virConnect
        virDomain
        virDomainSnapshot
        virInterface
        virNWFilter
        virNetwork
        virNodeDevice
        virSecret
        virStoragePool
        virStorageVol
        virStream
    exceptions.Exception(exceptions.BaseException)
        libvirtError
    
    class lliibbvviirrttEErrrroorr(exceptions.Exception)
     |  # The root of all libvirt errors.
     |  
     |  Method resolution order:
     |      libvirtError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, defmsg, conn=None, dom=None, net=None, pool=None, vol=None)
     |  
     |  ggeett__eerrrroorr__ccooddee(self)
     |  
     |  ggeett__eerrrroorr__ddoommaaiinn(self)
     |  
     |  ggeett__eerrrroorr__lleevveell(self)
     |  
     |  ggeett__eerrrroorr__mmeessssaaggee(self)
     |  
     |  ggeett__iinntt11(self)
     |  
     |  ggeett__iinntt22(self)
     |  
     |  ggeett__ssttrr11(self)
     |  
     |  ggeett__ssttrr22(self)
     |  
     |  ggeett__ssttrr33(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class vviirrCCoonnnneecctt(__builtin__.object)
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |      # virConnect methods from virConnect.py (hand coded)
     |  
     |  ____iinniitt____(self, _obj=None)
     |  
     |  bbaasseelliinneeCCPPUU(self, xmlCPUs, flags=0)
     |      Computes the most feature-rich CPU which is compatible with all given host CPUs.
     |  
     |  cchhaannggeeBBeeggiinn(self, flags=0)
     |      This function creates a restore point to which one can return
     |      later by calling virInterfaceChangeRollback(). This function should
     |      be called before any transaction with interface configuration.
     |      Once it is known that a new configuration works, it can be committed via
     |      virInterfaceChangeCommit(), which frees the restore point.
     |      
     |      If virInterfaceChangeBegin() is called when a transaction is
     |      already opened, this function will fail, and a
     |      VIR_ERR_INVALID_OPERATION will be logged.
     |  
     |  cchhaannggeeCCoommmmiitt(self, flags=0)
     |      This commits the changes made to interfaces and frees the restore point
     |      created by virInterfaceChangeBegin().
     |      
     |      If virInterfaceChangeCommit() is called when a transaction is not
     |      opened, this function will fail, and a VIR_ERR_INVALID_OPERATION
     |      will be logged.
     |  
     |  cchhaannggeeRRoollllbbaacckk(self, flags=0)
     |      This cancels changes made to interfaces settings by restoring previous
     |      state created by virInterfaceChangeBegin().
     |      
     |      If virInterfaceChangeRollback() is called when a transaction is not
     |      opened, this function will fail, and a VIR_ERR_INVALID_OPERATION
     |      will be logged.
     |  
     |  cclloossee(self)
     |      This function closes the connection to the Hypervisor. This should
     |      not be called if further interaction with the Hypervisor are needed
     |      especially if there is running domain which need further monitoring by
     |      the application.
     |      
     |      Connections are reference counted; the count is explicitly
     |      increased by the initial open (virConnectOpen, virConnectOpenAuth,
     |      and the like) as well as virConnectRef; it is also temporarily
     |      increased by other API that depend on the connection remaining
     |      alive.  The open and every virConnectRef call should have a
     |      matching virConnectClose, and all other references will be released
     |      after the corresponding operation completes.
     |  
     |  ccoommppaarreeCCPPUU(self, xmlDesc, flags=0)
     |      Compares the given CPU description with the host CPU
     |  
     |  ccrreeaatteeLLiinnuuxx(self, xmlDesc, flags=0)
     |      Deprecated after 0.4.6.
     |      Renamed to virDomainCreateXML() providing identical functionality.
     |      This existing name will left indefinitely for API compatibility.
     |  
     |  ccrreeaatteeXXMMLL(self, xmlDesc, flags=0)
     |      Launch a new guest domain, based on an XML description similar
     |      to the one returned by virDomainGetXMLDesc()
     |      This function may require privileged access to the hypervisor.
     |      The domain is not persistent, so its definition will disappear when it
     |      is destroyed, or if the host is restarted (see virDomainDefineXML() to
     |      define persistent domains).
     |      
     |      If the VIR_DOMAIN_START_PAUSED flag is set, the guest domain
     |      will be started, but its CPUs will remain paused. The CPUs
     |      can later be manually started using virDomainResume.
     |      
     |      If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
     |      domain will be automatically destroyed when the virConnectPtr
     |      object is finally released. This will also happen if the
     |      client application crashes / loses its connection to the
     |      libvirtd daemon. Any domains marked for auto destroy will
     |      block attempts at migration, save-to-file, or snapshots.
     |  
     |  ccrreeaatteeXXMMLLWWiitthhFFiilleess(self, xmlDesc, files, flags=0)
     |      Launch a new guest domain, based on an XML description similar
     |      to the one returned by virDomainGetXMLDesc()
     |      This function may require privileged access to the hypervisor.
     |      The domain is not persistent, so its definition will disappear when it
     |      is destroyed, or if the host is restarted (see virDomainDefineXML() to
     |      define persistent domains).
     |      
     |      @files provides an array of file descriptors which will be
     |      made available to the 'init' process of the guest. The file
     |      handles exposed to the guest will be renumbered to start
     |      from 3 (ie immediately following stderr). This is only
     |      supported for guests which use container based virtualization
     |      technology.
     |      
     |      If the VIR_DOMAIN_START_PAUSED flag is set, the guest domain
     |      will be started, but its CPUs will remain paused. The CPUs
     |      can later be manually started using virDomainResume.
     |      
     |      If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
     |      domain will be automatically destroyed when the virConnectPtr
     |      object is finally released. This will also happen if the
     |      client application crashes / loses its connection to the
     |      libvirtd daemon. Any domains marked for auto destroy will
     |      block attempts at migration, save-to-file, or snapshots.
     |  
     |  ddeeffiinneeXXMMLL(self, xml)
     |      Define a domain, but does not start it.
     |      This definition is persistent, until explicitly undefined with
     |      virDomainUndefine(). A previous definition for this domain would be
     |      overridden if it already exists.
     |      
     |      Some hypervisors may prevent this operation if there is a current
     |      block copy operation on a transient domain with the same id as the
     |      domain being defined; in that case, use virDomainBlockJobAbort() to
     |      stop the block copy first.
     |  
     |  ddiissppaattcchhDDoommaaiinnEEvveennttBBlloocckkPPuullllCCaallllbbaacckk(self, dom, path, type, status, cbData)
     |      Dispatches events to python user domain blockJob event callbacks
     |  
     |  ddoommaaiinnEEvveennttDDeerreeggiisstteerr(self, cb)
     |      Removes a Domain Event Callback. De-registering for a
     |      domain callback will disable delivery of this event type
     |  
     |  ddoommaaiinnEEvveennttDDeerreeggiisstteerrAAnnyy(self, callbackID)
     |      Removes a Domain Event Callback. De-registering for a
     |      domain callback will disable delivery of this event type
     |  
     |  ddoommaaiinnEEvveennttRReeggiisstteerr(self, cb, opaque)
     |      Adds a Domain Event Callback. Registering for a domain
     |      callback will enable delivery of the events
     |  
     |  ddoommaaiinnEEvveennttRReeggiisstteerrAAnnyy(self, dom, eventID, cb, opaque)
     |      Adds a Domain Event Callback. Registering for a domain
     |      callback will enable delivery of the events
     |  
     |  ddoommaaiinnXXMMLLFFrroommNNaattiivvee(self, nativeFormat, nativeConfig, flags=0)
     |      Reads native configuration data  describing a domain, and
     |      generates libvirt domain XML. The format of the native
     |      data is hypervisor dependant.
     |  
     |  ddoommaaiinnXXMMLLTTooNNaattiivvee(self, nativeFormat, domainXml, flags=0)
     |      Reads a domain XML configuration document, and generates
     |      a native configuration file describing the domain.
     |      The format of the native data is hypervisor dependant.
     |  
     |  ffiinnddSSttoorraaggeePPoooollSSoouurrcceess(self, type, srcSpec, flags=0)
     |      Talks to a storage backend and attempts to auto-discover the set of
     |      available storage pool sources. e.g. For iSCSI this would be a set of
     |      iSCSI targets. For NFS this would be a list of exported paths.  The
     |      srcSpec (optional for some storage pool types, e.g. local ones) is
     |      an instance of the storage pool's source element specifying where
     |      to look for the pools.
     |      
     |      srcSpec is not required for some types (e.g., those querying
     |      local storage resources only)
     |  
     |  ggeettCCPPUUMMaapp(self, flags=0)
     |      Get node CPU information
     |  
     |  ggeettCCPPUUMMooddeellNNaammeess(self, arch, flags=0)
     |      Get the list of supported CPU models.
     |  
     |  ggeettCCPPUUSSttaattss(self, cpuNum, flags=0)
     |      Extract node's CPU statistics.
     |  
     |  ggeettCCaappaabbiilliittiieess(self)
     |      Provides capabilities of the hypervisor / driver.
     |  
     |  ggeettCCeellllssFFrreeeeMMeemmoorryy(self, startCell, maxCells)
     |      Returns the available memory for a list of cells
     |  
     |  ggeettFFrreeeeMMeemmoorryy(self)
     |      provides the free memory available on the Node
     |      Note: most libvirt APIs provide memory sizes in kibibytes, but in this
     |      function the returned value is in bytes. Divide by 1024 as necessary.
     |  
     |  ggeettHHoossttnnaammee(self)
     |      This returns a system hostname on which the hypervisor is
     |      running (based on the result of the gethostname system call, but
     |      possibly expanded to a fully-qualified domain name via getaddrinfo).
     |      If we are connected to a remote system, then this returns the
     |      hostname of the remote system.
     |  
     |  ggeettIInnffoo(self)
     |      Extract hardware information about the Node. Note that the memory size is reported in MiB instead of KiB.
     |  
     |  ggeettLLiibbVVeerrssiioonn(self)
     |      Returns the libvirt version of the connection host
     |  
     |  ggeettMMaaxxVVccppuuss(self, type)
     |      Provides the maximum number of virtual CPUs supported for a guest VM of a
     |      specific type. The 'type' parameter here corresponds to the 'type'
     |      attribute in the <domain> element of the XML.
     |  
     |  ggeettMMeemmoorryyPPaarraammeetteerrss(self, flags=0)
     |      Get the node memory parameters
     |  
     |  ggeettMMeemmoorryySSttaattss(self, cellNum, flags=0)
     |      Extract node's memory statistics.
     |  
     |  ggeettSSyyssiinnffoo(self, flags=0)
     |      This returns the XML description of the sysinfo details for the
     |      host on which the hypervisor is running, in the same format as the
     |      <sysinfo> element of a domain XML.  This information is generally
     |      available only for hypervisors running with root privileges.
     |  
     |  ggeettTTyyppee(self)
     |      Get the name of the Hypervisor driver used. This is merely the driver
     |      name; for example, both KVM and QEMU guests are serviced by the
     |      driver for the qemu:// URI, so a return of "QEMU" does not indicate
     |      whether KVM acceleration is present.  For more details about the
     |      hypervisor, use virConnectGetCapabilities().
     |  
     |  ggeettUURRII(self)
     |      This returns the URI (name) of the hypervisor connection.
     |      Normally this is the same as or similar to the string passed
     |      to the virConnectOpen/virConnectOpenReadOnly call, but
     |      the driver may make the URI canonical.  If name == None
     |      was passed to virConnectOpen, then the driver will return
     |      a non-None URI which can be used to connect to the same
     |      hypervisor later.
     |  
     |  ggeettVVeerrssiioonn(self)
     |      Returns the running hypervisor version of the connection host
     |  
     |  iinntteerrffaacceeDDeeffiinneeXXMMLL(self, xml, flags=0)
     |      Define an interface (or modify existing interface configuration).
     |      
     |      Normally this change in the interface configuration is immediately
     |      permanent/persistent, but if virInterfaceChangeBegin() has been
     |      previously called (i.e. if an interface config transaction is
     |      open), the new interface definition will only become permanent if
     |      virInterfaceChangeCommit() is called prior to the next reboot of
     |      the system running libvirtd. Prior to that time, it can be
     |      explicitly removed using virInterfaceChangeRollback(), or will be
     |      automatically removed during the next reboot of the system running
     |      libvirtd.
     |  
     |  iinntteerrffaacceeLLooookkuuppBByyMMAACCSSttrriinngg(self, macstr)
     |      Try to lookup an interface on the given hypervisor based on its MAC.
     |  
     |  iinntteerrffaacceeLLooookkuuppBByyNNaammee(self, name)
     |      Try to lookup an interface on the given hypervisor based on its name.
     |  
     |  iissAAlliivvee(self)
     |      Determine if the connection to the hypervisor is still alive
     |      
     |      A connection will be classed as alive if it is either local, or running
     |      over a channel (TCP or UNIX socket) which is not closed.
     |  
     |  iissEEnnccrryypptteedd(self)
     |      Determine if the connection to the hypervisor is encrypted
     |  
     |  iissSSeeccuurree(self)
     |      Determine if the connection to the hypervisor is secure
     |      
     |      A connection will be classed as secure if it is either
     |      encrypted, or running over a channel which is not exposed
     |      to eavesdropping (eg a UNIX domain socket, or pipe)
     |  
     |  lliissttAAllllDDeevviicceess(self, flags=0)
     |      Returns a list of host node device objects
     |  
     |  lliissttAAllllDDoommaaiinnss(self, flags=0)
     |      List all domains and returns a list of domain objects
     |  
     |  lliissttAAllllIInntteerrffaacceess(self, flags=0)
     |      Returns a list of interface objects
     |  
     |  lliissttAAllllNNWWFFiilltteerrss(self, flags=0)
     |      Returns a list of network filter objects
     |  
     |  lliissttAAllllNNeettwwoorrkkss(self, flags=0)
     |      Returns a list of network objects
     |  
     |  lliissttAAllllSSeeccrreettss(self, flags=0)
     |      Returns a list of secret objects
     |  
     |  lliissttAAllllSSttoorraaggeePPoooollss(self, flags=0)
     |      Returns a list of storage pool objects
     |  
     |  lliissttDDeeffiinneeddDDoommaaiinnss(self)
     |      list the defined domains, stores the pointers to the names in @names
     |  
     |  lliissttDDeeffiinneeddIInntteerrffaacceess(self)
     |      list the defined interfaces, stores the pointers to the names in @names
     |  
     |  lliissttDDeeffiinneeddNNeettwwoorrkkss(self)
     |      list the defined networks, stores the pointers to the names in @names
     |  
     |  lliissttDDeeffiinneeddSSttoorraaggeePPoooollss(self)
     |      list the defined storage pool, stores the pointers to the names in @names
     |  
     |  lliissttDDeevviicceess(self, cap, flags=0)
     |      list the node devices
     |  
     |  lliissttDDoommaaiinnssIIDD(self)
     |      Returns the list of the ID of the domains on the hypervisor
     |  
     |  lliissttIInntteerrffaacceess(self)
     |      list the running interfaces, stores the pointers to the names in @names
     |  
     |  lliissttNNWWFFiilltteerrss(self)
     |      List the defined network filters
     |  
     |  lliissttNNeettwwoorrkkss(self)
     |      list the networks, stores the pointers to the names in @names
     |  
     |  lliissttSSeeccrreettss(self)
     |      List the defined secret IDs
     |  
     |  lliissttSSttoorraaggeePPoooollss(self)
     |      list the storage pools, stores the pointers to the names in @names
     |  
     |  llooookkuuppBByyIIDD(self, id)
     |      Try to find a domain based on the hypervisor ID number
     |      Note that this won't work for inactive domains which have an ID of -1,
     |      in that case a lookup based on the Name or UUId need to be done instead.
     |  
     |  llooookkuuppBByyNNaammee(self, name)
     |      Try to lookup a domain on the given hypervisor based on its name.
     |  
     |  llooookkuuppBByyUUUUIIDD(self, uuid)
     |      Try to lookup a domain on the given hypervisor based on its UUID.
     |  
     |  llooookkuuppBByyUUUUIIDDSSttrriinngg(self, uuidstr)
     |      Try to lookup a domain on the given hypervisor based on its UUID.
     |  
     |  mmiiggrraattee(self, domain, flags=0, dname=None, uri=None, bandwidth=0)
     |      Migrate the domain object from its current host to the destination
     |      host given by dconn (a connection to the destination host).
     |      
     |      Flags may be one of more of the following:
     |        VIR_MIGRATE_LIVE      Do not pause the VM during migration
     |        VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
     |        VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
     |        VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
     |                                 on the destination host.
     |        VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
     |                                    domain on the source host.
     |        VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
     |        VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
     |                                    disk copy
     |        VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
     |                                    incremental disk copy
     |        VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
     |                                      changes during the migration process (set
     |                                      automatically when supported).
     |        VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
     |        VIR_MIGRATE_OFFLINE Migrate offline
     |      
     |      VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
     |      Applications using the VIR_MIGRATE_PEER2PEER flag will probably
     |      prefer to invoke virDomainMigrateToURI, avoiding the need to
     |      open connection to the destination host themselves.
     |      
     |      If a hypervisor supports renaming domains during migration,
     |      then you may set the dname parameter to the new name (otherwise
     |      it keeps the same name).  If this is not supported by the
     |      hypervisor, dname must be None or else you will get an error.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is set, the uri parameter
     |      must be a valid libvirt connection URI, by which the source
     |      libvirt driver can connect to the destination libvirt. If
     |      omitted, the dconn connection object will be queried for its
     |      current URI.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is NOT set, the URI parameter
     |      takes a hypervisor specific format. The hypervisor capabilities
     |      XML includes details of the support URI schemes. If omitted
     |      the dconn will be asked for a default URI.
     |      
     |      If you want to copy non-shared storage within migration you
     |      can use either VIR_MIGRATE_NON_SHARED_DISK or
     |      VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.
     |      
     |      In either case it is typically only necessary to specify a
     |      URI if the destination host has multiple interfaces and a
     |      specific interface is required to transmit migration data.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter.  If set to 0,
     |      libvirt will choose a suitable default.  Some hypervisors do
     |      not support this feature and will return an error if bandwidth
     |      is not 0.
     |      
     |      To see which features are supported by the current hypervisor,
     |      see virConnectGetCapabilities, /capabilities/host/migration_features.
     |      
     |      There are many limitations on migration imposed by the underlying
     |      technology - for example it may not be possible to migrate between
     |      different processors even with the same architecture, or between
     |      different types of hypervisor.
     |  
     |  mmiiggrraattee22(self, domain, dxml=None, flags=0, dname=None, uri=None, bandwidth=0)
     |      Migrate the domain object from its current host to the destination
     |      host given by dconn (a connection to the destination host).
     |      
     |      Flags may be one of more of the following:
     |        VIR_MIGRATE_LIVE      Do not pause the VM during migration
     |        VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
     |        VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
     |        VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
     |                                 on the destination host.
     |        VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
     |                                    domain on the source host.
     |        VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
     |        VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
     |                                    disk copy
     |        VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
     |                                    incremental disk copy
     |        VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
     |                                      changes during the migration process (set
     |                                      automatically when supported).
     |        VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
     |        VIR_MIGRATE_OFFLINE Migrate offline
     |      
     |      VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
     |      Applications using the VIR_MIGRATE_PEER2PEER flag will probably
     |      prefer to invoke virDomainMigrateToURI, avoiding the need to
     |      open connection to the destination host themselves.
     |      
     |      If a hypervisor supports renaming domains during migration,
     |      then you may set the dname parameter to the new name (otherwise
     |      it keeps the same name).  If this is not supported by the
     |      hypervisor, dname must be None or else you will get an error.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is set, the uri parameter
     |      must be a valid libvirt connection URI, by which the source
     |      libvirt driver can connect to the destination libvirt. If
     |      omitted, the dconn connection object will be queried for its
     |      current URI.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is NOT set, the URI parameter
     |      takes a hypervisor specific format. The hypervisor capabilities
     |      XML includes details of the support URI schemes. If omitted
     |      the dconn will be asked for a default URI.
     |      
     |      If you want to copy non-shared storage within migration you
     |      can use either VIR_MIGRATE_NON_SHARED_DISK or
     |      VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.
     |      
     |      In either case it is typically only necessary to specify a
     |      URI if the destination host has multiple interfaces and a
     |      specific interface is required to transmit migration data.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter.  If set to 0,
     |      libvirt will choose a suitable default.  Some hypervisors do
     |      not support this feature and will return an error if bandwidth
     |      is not 0.
     |      
     |      To see which features are supported by the current hypervisor,
     |      see virConnectGetCapabilities, /capabilities/host/migration_features.
     |      
     |      There are many limitations on migration imposed by the underlying
     |      technology - for example it may not be possible to migrate between
     |      different processors even with the same architecture, or between
     |      different types of hypervisor.
     |      
     |      If the hypervisor supports it, @dxml can be used to alter
     |      host-specific portions of the domain XML that will be used on
     |      the destination.  For example, it is possible to alter the
     |      backing filename that is associated with a disk device, in order
     |      to account for naming differences between source and destination
     |      in accessing the underlying storage.  The migration will fail
     |      if @dxml would cause any guest-visible changes.  Pass None
     |      if no changes are needed to the XML between source and destination.
     |      @dxml cannot be used to rename the domain during migration (use
     |      @dname for that purpose).  Domain name in @dxml must match the
     |      original domain name.
     |  
     |  mmiiggrraattee33(self, domain, params, flags=0)
     |      Migrate the domain object from its current host to the destination host
     |      given by dconn (a connection to the destination host).
     |  
     |  mmiiggrraatteeTTooUURRII33(self, domain, params, flags=0)
     |      Migrate the domain object from its current host to the destination host
     |      given by URI.
     |  
     |  nneettwwoorrkkCCrreeaatteeXXMMLL(self, xmlDesc)
     |      Create and start a new virtual network, based on an XML description
     |      similar to the one returned by virNetworkGetXMLDesc()
     |  
     |  nneettwwoorrkkDDeeffiinneeXXMMLL(self, xml)
     |      Define a network, but does not create it
     |  
     |  nneettwwoorrkkLLooookkuuppBByyNNaammee(self, name)
     |      Try to lookup a network on the given hypervisor based on its name.
     |  
     |  nneettwwoorrkkLLooookkuuppBByyUUUUIIDD(self, uuid)
     |      Try to lookup a network on the given hypervisor based on its UUID.
     |  
     |  nneettwwoorrkkLLooookkuuppBByyUUUUIIDDSSttrriinngg(self, uuidstr)
     |      Try to lookup a network on the given hypervisor based on its UUID.
     |  
     |  nneewwSSttrreeaamm(self, flags=0)
     |      Creates a new stream object which can be used to perform
     |      streamed I/O with other public API function.
     |      
     |      When no longer needed, a stream object must be released
     |      with virStreamFree. If a data stream has been used,
     |      then the application must call virStreamFinish or
     |      virStreamAbort before free'ing to, in order to notify
     |      the driver of termination.
     |      
     |      If a non-blocking data stream is required passed
     |      VIR_STREAM_NONBLOCK for flags, otherwise pass 0.
     |  
     |  nnooddeeDDeevviicceeCCrreeaatteeXXMMLL(self, xmlDesc, flags=0)
     |      Create a new device on the VM host machine, for example, virtual
     |      HBAs created using vport_create.
     |  
     |  nnooddeeDDeevviicceeLLooookkuuppBByyNNaammee(self, name)
     |      Lookup a node device by its name.
     |  
     |  nnooddeeDDeevviicceeLLooookkuuppSSCCSSIIHHoossttBByyWWWWNN(self, wwnn, wwpn, flags=0)
     |      Lookup SCSI Host which is capable with 'fc_host' by its WWNN and WWPN.
     |  
     |  nnuummOOffDDeeffiinneeddDDoommaaiinnss(self)
     |      Provides the number of defined but inactive domains.
     |  
     |  nnuummOOffDDeeffiinneeddIInntteerrffaacceess(self)
     |      Provides the number of defined (inactive) interfaces on the physical host.
     |  
     |  nnuummOOffDDeeffiinneeddNNeettwwoorrkkss(self)
     |      Provides the number of inactive networks.
     |  
     |  nnuummOOffDDeeffiinneeddSSttoorraaggeePPoooollss(self)
     |      Provides the number of inactive storage pools
     |  
     |  nnuummOOffDDeevviicceess(self, cap, flags=0)
     |      Provides the number of node devices.
     |      
     |      If the optional 'cap'  argument is non-None, then the count
     |      will be restricted to devices with the specified capability
     |  
     |  nnuummOOffDDoommaaiinnss(self)
     |      Provides the number of active domains.
     |  
     |  nnuummOOffIInntteerrffaacceess(self)
     |      Provides the number of active interfaces on the physical host.
     |  
     |  nnuummOOffNNWWFFiilltteerrss(self)
     |      Provides the number of nwfilters.
     |  
     |  nnuummOOffNNeettwwoorrkkss(self)
     |      Provides the number of active networks.
     |  
     |  nnuummOOffSSeeccrreettss(self)
     |      Fetch number of currently defined secrets.
     |  
     |  nnuummOOffSSttoorraaggeePPoooollss(self)
     |      Provides the number of active storage pools
     |  
     |  nnwwffiilltteerrDDeeffiinneeXXMMLL(self, xmlDesc)
     |      Define a new network filter, based on an XML description
     |      similar to the one returned by virNWFilterGetXMLDesc()
     |  
     |  nnwwffiilltteerrLLooookkuuppBByyNNaammee(self, name)
     |      Try to lookup a network filter on the given hypervisor based on its name.
     |  
     |  nnwwffiilltteerrLLooookkuuppBByyUUUUIIDD(self, uuid)
     |      Try to lookup a network filter on the given hypervisor based on its UUID.
     |  
     |  nnwwffiilltteerrLLooookkuuppBByyUUUUIIDDSSttrriinngg(self, uuidstr)
     |      Try to lookup an nwfilter on the given hypervisor based on its UUID.
     |  
     |  rreeggiisstteerrCClloosseeCCaallllbbaacckk(self, cb, opaque)
     |      Adds a close event callback, providing a notification
     |      when a connection fails / closes
     |  
     |  rreessttoorree(self, frm)
     |      This method will restore a domain saved to disk by virDomainSave().
     |      
     |      See virDomainRestoreFlags() for more control.
     |  
     |  rreessttoorreeFFllaaggss(self, frm, dxml=None, flags=0)
     |      This method will restore a domain saved to disk by virDomainSave().
     |      
     |      If the hypervisor supports it, @dxml can be used to alter
     |      host-specific portions of the domain XML that will be used when
     |      restoring an image.  For example, it is possible to alter the
     |      backing filename that is associated with a disk device, in order to
     |      prepare for file renaming done as part of backing up the disk
     |      device while the domain is stopped.
     |      
     |      If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
     |      attempt to bypass the file system cache while restoring the file, or
     |      fail if it cannot do so for the given system; this can allow less
     |      pressure on file system cache, but also risks slowing saves to NFS.
     |      
     |      Normally, the saved state file will remember whether the domain was
     |      running or paused, and restore defaults to the same state.
     |      Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
     |      @flags will override the default read from the file.  These two
     |      flags are mutually exclusive.
     |  
     |  ssaavveeIImmaaggeeDDeeffiinneeXXMMLL(self, file, dxml, flags=0)
     |      This updates the definition of a domain stored in a saved state
     |      file.  @file must be a file created previously by virDomainSave()
     |      or virDomainSaveFlags().
     |      
     |      @dxml can be used to alter host-specific portions of the domain XML
     |      that will be used when restoring an image.  For example, it is
     |      possible to alter the backing filename that is associated with a
     |      disk device, to match renaming done as part of backing up the disk
     |      device while the domain is stopped.
     |      
     |      Normally, the saved state file will remember whether the domain was
     |      running or paused, and restore defaults to the same state.
     |      Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
     |      @flags will override the default saved into the file; omitting both
     |      leaves the file's default unchanged.  These two flags are mutually
     |      exclusive.
     |  
     |  ssaavveeIImmaaggeeGGeettXXMMLLDDeesscc(self, file, flags=0)
     |      This method will extract the XML describing the domain at the time
     |      a saved state file was created.  @file must be a file created
     |      previously by virDomainSave() or virDomainSaveFlags().
     |      
     |      No security-sensitive data will be included unless @flags contains
     |      VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
     |      connections.  For this API, @flags should not contain either
     |      VIR_DOMAIN_XML_INACTIVE or VIR_DOMAIN_XML_UPDATE_CPU.
     |  
     |  sseeccrreettDDeeffiinneeXXMMLL(self, xml, flags=0)
     |      If XML specifies a UUID, locates the specified secret and replaces all
     |      attributes of the secret specified by UUID by attributes specified in xml
     |      (any attributes not specified in xml are discarded).
     |      
     |      Otherwise, creates a new secret with an automatically chosen UUID, and
     |      initializes its attributes from xml.
     |  
     |  sseeccrreettLLooookkuuppBByyUUUUIIDD(self, uuid)
     |      Try to lookup a secret on the given hypervisor based on its UUID.
     |  
     |  sseeccrreettLLooookkuuppBByyUUUUIIDDSSttrriinngg(self, uuidstr)
     |      Try to lookup a secret on the given hypervisor based on its UUID.
     |      Uses the printable string value to describe the UUID
     |  
     |  sseeccrreettLLooookkuuppBByyUUssaaggee(self, usageType, usageID)
     |      Try to lookup a secret on the given hypervisor based on its usage
     |      The usageID is unique within the set of secrets sharing the
     |      same usageType value.
     |  
     |  sseettKKeeeeppAAlliivvee(self, interval, count)
     |      Start sending keepalive messages after interval second of inactivity and
     |      consider the connection to be broken when no response is received after
     |      count keepalive messages sent in a row.  In other words, sending count + 1
     |      keepalive message results in closing the connection.  When interval is <= 0,
     |      no keepalive messages will be sent.  When count is 0, the connection will be
     |      automatically closed after interval seconds of inactivity without sending
     |      any keepalive messages.
     |      
     |      Note: client has to implement and run event loop to be able to use keepalive
     |      messages.  Failure to do so may result in connections being closed
     |      unexpectedly.
     |      
     |      Note: This API function controls only keepalive messages sent by the client.
     |      If the server is configured to use keepalive you still need to run the event
     |      loop to respond to them, even if you disable keepalives by this function.
     |  
     |  sseettMMeemmoorryyPPaarraammeetteerrss(self, params, flags=0)
     |      Change the node memory tunables
     |  
     |  ssttoorraaggeePPoooollCCrreeaatteeXXMMLL(self, xmlDesc, flags=0)
     |      Create a new storage based on its XML description. The
     |      pool is not persistent, so its definition will disappear
     |      when it is destroyed, or if the host is restarted
     |  
     |  ssttoorraaggeePPoooollDDeeffiinneeXXMMLL(self, xml, flags=0)
     |      Define a new inactive storage pool based on its XML description. The
     |      pool is persistent, until explicitly undefined.
     |  
     |  ssttoorraaggeePPoooollLLooookkuuppBByyNNaammee(self, name)
     |      Fetch a storage pool based on its unique name
     |  
     |  ssttoorraaggeePPoooollLLooookkuuppBByyUUUUIIDD(self, uuid)
     |      Fetch a storage pool based on its globally unique id
     |  
     |  ssttoorraaggeePPoooollLLooookkuuppBByyUUUUIIDDSSttrriinngg(self, uuidstr)
     |      Fetch a storage pool based on its globally unique id
     |  
     |  ssttoorraaggeeVVoollLLooookkuuppBByyKKeeyy(self, key)
     |      Fetch a pointer to a storage volume based on its
     |      globally unique key
     |  
     |  ssttoorraaggeeVVoollLLooookkuuppBByyPPaatthh(self, path)
     |      Fetch a pointer to a storage volume based on its
     |      locally (host) unique path
     |  
     |  ssuussppeennddFFoorrDDuurraattiioonn(self, target, duration, flags=0)
     |      Attempt to suspend the node (host machine) for the given duration of
     |      time in the specified state (Suspend-to-RAM, Suspend-to-Disk or
     |      Hybrid-Suspend). Schedule the node's Real-Time-Clock interrupt to
     |      resume the node after the duration is complete.
     |  
     |  uunnrreeggiisstteerrCClloosseeCCaallllbbaacckk(self)
     |      Removes a close event callback
     |  
     |  vviirrCCoonnnnGGeettLLaassttEErrrroorr(self)
     |      Provide a pointer to the last error caught on that connection
     |      
     |      This method is not protected against access from multiple
     |      threads. In a multi-threaded application, always use the
     |      global virGetLastError() API which is backed by thread
     |      local storage.
     |      
     |      If the connection object was discovered to be invalid by
     |      an API call, then the error will be reported against the
     |      global error object.
     |      
     |      Since 0.6.0, all errors reported in the per-connection object
     |      are also duplicated in the global error object. As such an
     |      application can always use virGetLastError(). This method
     |      remains for backwards compatibility.
     |  
     |  vviirrCCoonnnnRReesseettLLaassttEErrrroorr(self)
     |      The error object is kept in thread local storage, so separate
     |      threads can safely access this concurrently.
     |      
     |      Reset the last error caught on that connection
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrDDoommaaiinn(__builtin__.object)
     |  Methods defined here:
     |  
     |  IIDD(self)
     |      Get the hypervisor ID number for the domain
     |  
     |  OOSSTTyyppee(self)
     |      Get the type of domain operation system.
     |  
     |  UUUUIIDD(self)
     |      Extract the UUID unique Identifier of a domain.
     |  
     |  UUUUIIDDSSttrriinngg(self)
     |      Fetch globally unique ID of the domain as a string.
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Provide an XML description of the domain. The description may be reused
     |      later to relaunch the domain with virDomainCreateXML().
     |      
     |      No security-sensitive data will be included unless @flags contains
     |      VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
     |      connections.  If @flags includes VIR_DOMAIN_XML_INACTIVE, then the
     |      XML represents the configuration that will be used on the next boot
     |      of a persistent domain; otherwise, the configuration represents the
     |      currently running domain.  If @flags contains
     |      VIR_DOMAIN_XML_UPDATE_CPU, then the portion of the domain XML
     |      describing CPU capabilities is modified to match actual
     |      capabilities of the host.
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  aabboorrttJJoobb(self)
     |      Requests that the current background job be aborted at the
     |      soonest opportunity.
     |  
     |  aattttaacchhDDeevviiccee(self, xml)
     |      Create a virtual device attachment to backend.  This function,
     |      having hotplug semantics, is only allowed on an active domain.
     |      
     |      For compatibility, this method can also be used to change the media
     |      in an existing CDROM/Floppy device, however, applications are
     |      recommended to use the virDomainUpdateDeviceFlag method instead.
     |  
     |  aattttaacchhDDeevviicceeFFllaaggss(self, xml, flags=0)
     |      Attach a virtual device to a domain, using the flags parameter
     |      to control how the device is attached.  VIR_DOMAIN_AFFECT_CURRENT
     |      specifies that the device allocation is made based on current domain
     |      state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
     |      allocated to the active domain instance only and is not added to the
     |      persisted domain configuration.  VIR_DOMAIN_AFFECT_CONFIG
     |      specifies that the device shall be allocated to the persisted domain
     |      configuration only.  Note that the target hypervisor must return an
     |      error if unable to satisfy flags.  E.g. the hypervisor driver will
     |      return failure if LIVE is specified but it only supports modifying the
     |      persisted device allocation.
     |      
     |      For compatibility, this method can also be used to change the media
     |      in an existing CDROM/Floppy device, however, applications are
     |      recommended to use the virDomainUpdateDeviceFlag method instead.
     |  
     |  aauuttoossttaarrtt(self)
     |      Extract the autostart flag for a domain
     |  
     |  bbllkkiiooPPaarraammeetteerrss(self, flags=0)
     |      Get the blkio parameters
     |  
     |  bblloocckkCCoommmmiitt(self, disk, base, top, bandwidth=0, flags=0)
     |      Commit changes that were made to temporary top-level files within a disk
     |      image backing file chain into a lower-level base file.  In other words,
     |      take all the difference between @base and @top, and update @base to contain
     |      that difference; after the commit, any portion of the chain that previously
     |      depended on @top will now depend on @base, and all files after @base up
     |      to and including @top will now be invalidated.  A typical use of this
     |      command is to reduce the length of a backing file chain after taking an
     |      external disk snapshot.  To move data in the opposite direction, see
     |      virDomainBlockPull().
     |      
     |      This command starts a long-running commit block job, whose status may
     |      be tracked by virDomainBlockJobInfo() with a job type of
     |      VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT, and the operation can be aborted with
     |      virDomainBlockJobAbort().  When finished, an asynchronous event is
     |      raised to indicate the final status, and the job no longer exists.  If
     |      the job is aborted, it is up to the hypervisor whether starting a new
     |      job will resume from the same point, or start over.
     |      
     |      Be aware that this command may invalidate files even if it is aborted;
     |      the user is cautioned against relying on the contents of invalidated
     |      intermediate files such as @top without manually rebasing those files
     |      to use a backing file of a read-only copy of @base prior to the point
     |      where the commit operation was started (although such a rebase cannot
     |      be safely done until the commit has successfully completed).  However,
     |      the domain itself will not have any issues; the active layer remains
     |      valid throughout the entire commit operation.  As a convenience,
     |      if @flags contains VIR_DOMAIN_BLOCK_COMMIT_DELETE, this command will
     |      unlink all files that were invalidated, after the commit successfully
     |      completes.
     |      
     |      By default, if @base is None, the commit target will be the bottom of
     |      the backing chain; if @flags contains VIR_DOMAIN_BLOCK_COMMIT_SHALLOW,
     |      then the immediate backing file of @top will be used instead.  If @top
     |      is None, the active image at the top of the chain will be used.  Some
     |      hypervisors place restrictions on how much can be committed, and might
     |      fail if @base is not the immediate backing file of @top, or if @top is
     |      the active layer in use by a running domain, or if @top is not the
     |      top-most file; restrictions may differ for online vs. offline domains.
     |      
     |      The @disk parameter is either an unambiguous source name of the
     |      block device (the <source file='...'/> sub-element, such as
     |      "/path/to/image"), or the device target shorthand (the
     |      <target dev='...'/> sub-element, such as "xvda").  Valid names
     |      can be found by calling virDomainGetXMLDesc() and inspecting
     |      elements within //domain/devices/disk.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do the commit can be
     |      specified with the bandwidth parameter.  If set to 0, libvirt will choose a
     |      suitable default.  Some hypervisors do not support this feature and will
     |      return an error if bandwidth is not 0; in this case, it might still be
     |      possible for a later call to virDomainBlockJobSetSpeed() to succeed.
     |      The actual speed can be determined with virDomainGetBlockJobInfo().
     |  
     |  bblloocckkIInnffoo(self, path, flags=0)
     |      Extract information about a domain block device size
     |  
     |  bblloocckkIIooTTuunnee(self, disk, flags=0)
     |      Get the I/O tunables for a block device
     |  
     |  bblloocckkJJoobbAAbboorrtt(self, disk, flags=0)
     |      Cancel the active block job on the given disk.
     |      
     |      The @disk parameter is either an unambiguous source name of the
     |      block device (the <source file='...'/> sub-element, such as
     |      "/path/to/image"), or (since 0.9.5) the device target shorthand
     |      (the <target dev='...'/> sub-element, such as "xvda").  Valid names
     |      can be found by calling virDomainGetXMLDesc() and inspecting
     |      elements within //domain/devices/disk.
     |      
     |      If the current block job for @disk is VIR_DOMAIN_BLOCK_JOB_TYPE_PULL, then
     |      by default, this function performs a synchronous operation and the caller
     |      may assume that the operation has completed when 0 is returned.  However,
     |      BlockJob operations may take a long time to cancel, and during this time
     |      further domain interactions may be unresponsive.  To avoid this problem,
     |      pass VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC in the @flags argument to enable
     |      asynchronous behavior, returning as soon as possible.  When the job has
     |      been canceled, a BlockJob event will be emitted, with status
     |      VIR_DOMAIN_BLOCK_JOB_CANCELED (even if the ABORT_ASYNC flag was not
     |      used); it is also possible to poll virDomainBlockJobInfo() to see if
     |      the job cancellation is still pending.  This type of job can be restarted
     |      to pick up from where it left off.
     |      
     |      If the current block job for @disk is VIR_DOMAIN_BLOCK_JOB_TYPE_COPY, then
     |      the default is to abort the mirroring and revert to the source disk;
     |      adding @flags of VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT causes this call to
     |      fail with VIR_ERR_BLOCK_COPY_ACTIVE if the copy is not fully populated,
     |      otherwise it will swap the disk over to the copy to end the mirroring.  An
     |      event will be issued when the job is ended, and it is possible to use
     |      VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC to control whether this command waits
     |      for the completion of the job.  Restarting this job requires starting
     |      over from the beginning of the first phase.
     |  
     |  bblloocckkJJoobbIInnffoo(self, path, flags=0)
     |      Get progress information for a block job
     |  
     |  bblloocckkJJoobbSSeettSSppeeeedd(self, disk, bandwidth, flags=0)
     |      Set the maximimum allowable bandwidth that a block job may consume.  If
     |      bandwidth is 0, the limit will revert to the hypervisor default.
     |      
     |      The @disk parameter is either an unambiguous source name of the
     |      block device (the <source file='...'/> sub-element, such as
     |      "/path/to/image"), or (since 0.9.5) the device target shorthand
     |      (the <target dev='...'/> sub-element, such as "xvda").  Valid names
     |      can be found by calling virDomainGetXMLDesc() and inspecting
     |      elements within //domain/devices/disk.
     |  
     |  bblloocckkPPeeeekk(self, disk, offset, size, flags=0)
     |      Read the contents of domain's disk device
     |  
     |  bblloocckkPPuullll(self, disk, bandwidth=0, flags=0)
     |      Populate a disk image with data from its backing image.  Once all data from
     |      its backing image has been pulled, the disk no longer depends on a backing
     |      image.  This function pulls data for the entire device in the background.
     |      Progress of the operation can be checked with virDomainGetBlockJobInfo() and
     |      the operation can be aborted with virDomainBlockJobAbort().  When finished,
     |      an asynchronous event is raised to indicate the final status.  To move
     |      data in the opposite direction, see virDomainBlockCommit().
     |      
     |      The @disk parameter is either an unambiguous source name of the
     |      block device (the <source file='...'/> sub-element, such as
     |      "/path/to/image"), or (since 0.9.5) the device target shorthand
     |      (the <target dev='...'/> sub-element, such as "xvda").  Valid names
     |      can be found by calling virDomainGetXMLDesc() and inspecting
     |      elements within //domain/devices/disk.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do the copy can be
     |      specified with the bandwidth parameter.  If set to 0, libvirt will choose a
     |      suitable default.  Some hypervisors do not support this feature and will
     |      return an error if bandwidth is not 0; in this case, it might still be
     |      possible for a later call to virDomainBlockJobSetSpeed() to succeed.
     |      The actual speed can be determined with virDomainGetBlockJobInfo().
     |      
     |      This is shorthand for virDomainBlockRebase() with a None base.
     |  
     |  bblloocckkRReebbaassee(self, disk, base, bandwidth=0, flags=0)
     |      Populate a disk image with data from its backing image chain, and
     |      setting the backing image to @base, or alternatively copy an entire
     |      backing chain to a new file @base.
     |      
     |      When @flags is 0, this starts a pull, where @base must be the absolute
     |      path of one of the backing images further up the chain, or None to
     |      convert the disk image so that it has no backing image.  Once all
     |      data from its backing image chain has been pulled, the disk no
     |      longer depends on those intermediate backing images.  This function
     |      pulls data for the entire device in the background.  Progress of
     |      the operation can be checked with virDomainGetBlockJobInfo() with a
     |      job type of VIR_DOMAIN_BLOCK_JOB_TYPE_PULL, and the operation can be
     |      aborted with virDomainBlockJobAbort().  When finished, an asynchronous
     |      event is raised to indicate the final status, and the job no longer
     |      exists.  If the job is aborted, a new one can be started later to
     |      resume from the same point.
     |      
     |      When @flags includes VIR_DOMAIN_BLOCK_REBASE_COPY, this starts a copy,
     |      where @base must be the name of a new file to copy the chain to.  By
     |      default, the copy will pull the entire source chain into the destination
     |      file, but if @flags also contains VIR_DOMAIN_BLOCK_REBASE_SHALLOW, then
     |      only the top of the source chain will be copied (the source and
     |      destination have a common backing file).  By default, @base will be
     |      created with the same file format as the source, but this can be altered
     |      by adding VIR_DOMAIN_BLOCK_REBASE_COPY_RAW to force the copy to be raw
     |      (does not make sense with the shallow flag unless the source is also raw),
     |      or by using VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT to reuse an existing file
     |      with initial contents identical to the backing file of the source (this
     |      allows a management app to pre-create files with relative backing file
     |      names, rather than the default of absolute backing file names; as a
     |      security precaution, you should generally only use reuse_ext with the
     |      shallow flag and a non-raw destination file).
     |      
     |      A copy job has two parts; in the first phase, the @bandwidth parameter
     |      affects how fast the source is pulled into the destination, and the job
     |      can only be canceled by reverting to the source file; progress in this
     |      phase can be tracked via the virDomainBlockJobInfo() command, with a
     |      job type of VIR_DOMAIN_BLOCK_JOB_TYPE_COPY.  The job transitions to the
     |      second phase when the job info states cur == end, and remains alive to
     |      mirror all further changes to both source and destination.  The user
     |      must call virDomainBlockJobAbort() to end the mirroring while choosing
     |      whether to revert to source or pivot to the destination.  An event is
     |      issued when the job ends, and depending on the hypervisor, an event may
     |      also be issued when the job transitions from pulling to mirroring.  If
     |      the job is aborted, a new job will have to start over from the beginning
     |      of the first phase.
     |      
     |      Some hypervisors will restrict certain actions, such as virDomainSave()
     |      or virDomainDetachDevice(), while a copy job is active; they may
     |      also restrict a copy job to transient domains.
     |      
     |      The @disk parameter is either an unambiguous source name of the
     |      block device (the <source file='...'/> sub-element, such as
     |      "/path/to/image"), or the device target shorthand (the
     |      <target dev='...'/> sub-element, such as "xvda").  Valid names
     |      can be found by calling virDomainGetXMLDesc() and inspecting
     |      elements within //domain/devices/disk.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do the copy can be
     |      specified with the bandwidth parameter.  If set to 0, libvirt will choose a
     |      suitable default.  Some hypervisors do not support this feature and will
     |      return an error if bandwidth is not 0; in this case, it might still be
     |      possible for a later call to virDomainBlockJobSetSpeed() to succeed.
     |      The actual speed can be determined with virDomainGetBlockJobInfo().
     |      
     |      When @base is None and @flags is 0, this is identical to
     |      virDomainBlockPull().
     |  
     |  bblloocckkRReessiizzee(self, disk, size, flags=0)
     |      Resize a block device of domain while the domain is running.  If
     |      @flags is 0, then @size is in kibibytes (blocks of 1024 bytes);
     |      since 0.9.11, if @flags includes VIR_DOMAIN_BLOCK_RESIZE_BYTES,
     |      @size is in bytes instead.  @size is taken directly as the new
     |      size.  Depending on the file format, the hypervisor may round up
     |      to the next alignment boundary.
     |      
     |      The @disk parameter is either an unambiguous source name of the
     |      block device (the <source file='...'/> sub-element, such as
     |      "/path/to/image"), or (since 0.9.5) the device target shorthand
     |      (the <target dev='...'/> sub-element, such as "xvda").  Valid names
     |      can be found by calling virDomainGetXMLDesc() and inspecting
     |      elements within //domain/devices/disk.
     |      
     |      Note that this call may fail if the underlying virtualization hypervisor
     |      does not support it; this call requires privileged access to the
     |      hypervisor.
     |  
     |  bblloocckkSSttaattss(self, path)
     |      Extracts block device statistics for a domain
     |  
     |  bblloocckkSSttaattssFFllaaggss(self, path, flags=0)
     |      Extracts block device statistics parameters of a running domain
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ccoonnttrroollIInnffoo(self, flags=0)
     |      Extract details about current state of control interface to a domain.
     |  
     |  ccoorreeDDuummpp(self, to, flags=0)
     |      This method will dump the core of a domain on a given file for analysis.
     |      Note that for remote Xen Daemon the file path will be interpreted in
     |      the remote host. Hypervisors may require  the user to manually ensure
     |      proper permissions on the file named by @to.
     |      
     |      If @flags includes VIR_DUMP_CRASH, then leave the guest shut off with
     |      a crashed state after the dump completes.  If @flags includes
     |      VIR_DUMP_LIVE, then make the core dump while continuing to allow
     |      the guest to run; otherwise, the guest is suspended during the dump.
     |      VIR_DUMP_RESET flag forces reset of the quest after dump.
     |      The above three flags are mutually exclusive.
     |      
     |      Additionally, if @flags includes VIR_DUMP_BYPASS_CACHE, then libvirt
     |      will attempt to bypass the file system cache while creating the file,
     |      or fail if it cannot do so for the given system; this can allow less
     |      pressure on file system cache, but also risks slowing saves to NFS.
     |  
     |  ccrreeaattee(self)
     |      Launch a defined domain. If the call succeeds the domain moves from the
     |      defined to the running domains pools.  The domain will be paused only
     |      if restoring from managed state created from a paused domain.  For more
     |      control, see virDomainCreateWithFlags().
     |  
     |  ccrreeaatteeWWiitthhFFiilleess(self, files, flags=0)
     |      Launch a defined domain. If the call succeeds the domain moves from the
     |      defined to the running domains pools.
     |      
     |      @files provides an array of file descriptors which will be
     |      made available to the 'init' process of the guest. The file
     |      handles exposed to the guest will be renumbered to start
     |      from 3 (ie immediately following stderr). This is only
     |      supported for guests which use container based virtualization
     |      technology.
     |      
     |      If the VIR_DOMAIN_START_PAUSED flag is set, or if the guest domain
     |      has a managed save image that requested paused state (see
     |      virDomainManagedSave()) the guest domain will be started, but its
     |      CPUs will remain paused. The CPUs can later be manually started
     |      using virDomainResume().  In all other cases, the guest domain will
     |      be running.
     |      
     |      If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
     |      domain will be automatically destroyed when the virConnectPtr
     |      object is finally released. This will also happen if the
     |      client application crashes / loses its connection to the
     |      libvirtd daemon. Any domains marked for auto destroy will
     |      block attempts at migration, save-to-file, or snapshots.
     |      
     |      If the VIR_DOMAIN_START_BYPASS_CACHE flag is set, and there is a
     |      managed save file for this domain (created by virDomainManagedSave()),
     |      then libvirt will attempt to bypass the file system cache while restoring
     |      the file, or fail if it cannot do so for the given system; this can allow
     |      less pressure on file system cache, but also risks slowing loads from NFS.
     |      
     |      If the VIR_DOMAIN_START_FORCE_BOOT flag is set, then any managed save
     |      file for this domain is discarded, and the domain boots from scratch.
     |  
     |  ccrreeaatteeWWiitthhFFllaaggss(self, flags=0)
     |      Launch a defined domain. If the call succeeds the domain moves from the
     |      defined to the running domains pools.
     |      
     |      If the VIR_DOMAIN_START_PAUSED flag is set, or if the guest domain
     |      has a managed save image that requested paused state (see
     |      virDomainManagedSave()) the guest domain will be started, but its
     |      CPUs will remain paused. The CPUs can later be manually started
     |      using virDomainResume().  In all other cases, the guest domain will
     |      be running.
     |      
     |      If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
     |      domain will be automatically destroyed when the virConnectPtr
     |      object is finally released. This will also happen if the
     |      client application crashes / loses its connection to the
     |      libvirtd daemon. Any domains marked for auto destroy will
     |      block attempts at migration, save-to-file, or snapshots.
     |      
     |      If the VIR_DOMAIN_START_BYPASS_CACHE flag is set, and there is a
     |      managed save file for this domain (created by virDomainManagedSave()),
     |      then libvirt will attempt to bypass the file system cache while restoring
     |      the file, or fail if it cannot do so for the given system; this can allow
     |      less pressure on file system cache, but also risks slowing loads from NFS.
     |      
     |      If the VIR_DOMAIN_START_FORCE_BOOT flag is set, then any managed save
     |      file for this domain is discarded, and the domain boots from scratch.
     |  
     |  ddeessttrrooyy(self)
     |      Destroy the domain object. The running instance is shutdown if not down
     |      already and all resources used by it are given back to the hypervisor. This
     |      does not free the associated virDomainPtr object.
     |      This function may require privileged access.
     |      
     |      virDomainDestroy first requests that a guest terminate
     |      (e.g. SIGTERM), then waits for it to comply. After a reasonable
     |      timeout, if the guest still exists, virDomainDestroy will
     |      forcefully terminate the guest (e.g. SIGKILL) if necessary (which
     |      may produce undesirable results, for example unflushed disk cache
     |      in the guest). To avoid this possibility, it's recommended to
     |      instead call virDomainDestroyFlags, sending the
     |      VIR_DOMAIN_DESTROY_GRACEFUL flag.
     |      
     |      If the domain is transient and has any snapshot metadata (see
     |      virDomainSnapshotNum()), then that metadata will automatically
     |      be deleted when the domain quits.
     |  
     |  ddeessttrrooyyFFllaaggss(self, flags=0)
     |      Destroy the domain object. The running instance is shutdown if not down
     |      already and all resources used by it are given back to the hypervisor.
     |      This does not free the associated virDomainPtr object.
     |      This function may require privileged access.
     |      
     |      Calling this function with no @flags set (equal to zero) is
     |      equivalent to calling virDomainDestroy, and after a reasonable
     |      timeout will forcefully terminate the guest (e.g. SIGKILL) if
     |      necessary (which may produce undesirable results, for example
     |      unflushed disk cache in the guest). Including
     |      VIR_DOMAIN_DESTROY_GRACEFUL in the flags will prevent the forceful
     |      termination of the guest, and virDomainDestroyFlags will instead
     |      return an error if the guest doesn't terminate by the end of the
     |      timeout; at that time, the management application can decide if
     |      calling again without VIR_DOMAIN_DESTROY_GRACEFUL is appropriate.
     |      
     |      Another alternative which may produce cleaner results for the
     |      guest's disks is to use virDomainShutdown() instead, but that
     |      depends on guest support (some hypervisor/guest combinations may
     |      ignore the shutdown request).
     |  
     |  ddeettaacchhDDeevviiccee(self, xml)
     |      Destroy a virtual device attachment to backend.  This function,
     |      having hot-unplug semantics, is only allowed on an active domain.
     |  
     |  ddeettaacchhDDeevviicceeFFllaaggss(self, xml, flags=0)
     |      Detach a virtual device from a domain, using the flags parameter
     |      to control how the device is detached.  VIR_DOMAIN_AFFECT_CURRENT
     |      specifies that the device allocation is removed based on current domain
     |      state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
     |      deallocated from the active domain instance only and is not from the
     |      persisted domain configuration.  VIR_DOMAIN_AFFECT_CONFIG
     |      specifies that the device shall be deallocated from the persisted domain
     |      configuration only.  Note that the target hypervisor must return an
     |      error if unable to satisfy flags.  E.g. the hypervisor driver will
     |      return failure if LIVE is specified but it only supports removing the
     |      persisted device allocation.
     |      
     |      Some hypervisors may prevent this operation if there is a current
     |      block copy operation on the device being detached; in that case,
     |      use virDomainBlockJobAbort() to stop the block copy first.
     |      
     |      Beware that depending on the hypervisor and device type, detaching a device
     |      from a running domain may be asynchronous. That is, calling
     |      virDomainDetachDeviceFlags may just request device removal while the device
     |      is actually removed later (in cooperation with a guest OS). Previously,
     |      this fact was ignored and the device could have been removed from domain
     |      configuration before it was actually removed by the hypervisor causing
     |      various failures on subsequent operations. To check whether the device was
     |      successfully removed, either recheck domain configuration using
     |      virDomainGetXMLDesc() or add handler for VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED
     |      event. In case the device is already gone when virDomainDetachDeviceFlags
     |  
     |  ddiisskkEErrrroorrss(self, flags=0)
     |      Extract errors on disk devices.
     |  
     |  eemmuullaattoorrPPiinnIInnffoo(self, flags=0)
     |      Query the CPU affinity setting of the emulator process of domain
     |  
     |  ffSSTTrriimm(self, mountPoint, minimum, flags=0)
     |      Calls FITRIM within the guest (hence guest agent may be
     |      required depending on hypervisor used). Either call it on each
     |      mounted filesystem (@mountPoint is None) or just on specified
     |      @mountPoint. @minimum hints that free ranges smaller than this
     |      may be ignored (this is a hint and the guest may not respect
     |      it).  By increasing this value, the fstrim operation will
     |      complete more quickly for filesystems with badly fragmented
     |      free space, although not all blocks will be discarded.
     |      If @minimum is not zero, the command may fail.
     |  
     |  ggeettCCPPUUSSttaattss(self, total, flags=0)
     |      Extracts CPU statistics for a running domain. On success it will
     |      return a list of data of dictionary type. If boolean total is False or 0, the
     |      first element of the list refers to CPU0 on the host, second element is
     |      CPU1, and so on. The format of data struct is as follows:
     |      [{cpu_time:xxx}, {cpu_time:xxx}, ...]
     |      If it is True or 1, it returns total domain CPU statistics in the format of
     |      [{cpu_time:xxx, user_time:xxx, system_time:xxx}]
     |  
     |  hhaassCCuurrrreennttSSnnaappsshhoott(self, flags=0)
     |      Determine if the domain has a current snapshot.
     |  
     |  hhaassMMaannaaggeeddSSaavveeIImmaaggee(self, flags=0)
     |      Check if a domain has a managed save image as created by
     |      virDomainManagedSave(). Note that any running domain should not have
     |      such an image, as it should have been removed on restart.
     |  
     |  hhoossttnnaammee(self, flags=0)
     |      Get the hostname for that domain.
     |      
     |      Dependent on hypervisor used, this may require a guest agent to be
     |      available.
     |  
     |  iinnffoo(self)
     |      Extract information about a domain. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.
     |  
     |  iinnjjeeccttNNMMII(self, flags=0)
     |      Send NMI to the guest
     |  
     |  iinntteerrffaacceePPaarraammeetteerrss(self, device, flags=0)
     |      Get the bandwidth tunables for a interface device
     |  
     |  iinntteerrffaacceeSSttaattss(self, path)
     |      Extracts interface device statistics for a domain
     |  
     |  iissAAccttiivvee(self)
     |      Determine if the domain is currently running
     |  
     |  iissPPeerrssiisstteenntt(self)
     |      Determine if the domain has a persistent configuration
     |      which means it will still exist after shutting down
     |  
     |  iissUUppddaatteedd(self)
     |      Determine if the domain has been updated.
     |  
     |  jjoobbIInnffoo(self)
     |      Extract information about an active job being processed for a domain.
     |  
     |  jjoobbSSttaattss(self, flags=0)
     |      Extract information about an active job being processed for a domain.
     |  
     |  lliissttAAllllSSnnaappsshhoottss(self, flags=0)
     |      List all snapshots and returns a list of snapshot objects
     |  
     |  mmaannaaggeeddSSaavvee(self, flags=0)
     |      This method will suspend a domain and save its memory contents to
     |      a file on disk. After the call, if successful, the domain is not
     |      listed as running anymore.
     |      The difference from virDomainSave() is that libvirt is keeping track of
     |      the saved state itself, and will reuse it once the domain is being
     |      restarted (automatically or via an explicit libvirt call).
     |      As a result any running domain is sure to not have a managed saved image.
     |      This also implies that managed save only works on persistent domains,
     |      since the domain must still exist in order to use virDomainCreate() to
     |      restart it.
     |      
     |      If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
     |      attempt to bypass the file system cache while creating the file, or
     |      fail if it cannot do so for the given system; this can allow less
     |      pressure on file system cache, but also risks slowing saves to NFS.
     |      
     |      Normally, the managed saved state will remember whether the domain
     |      was running or paused, and start will resume to the same state.
     |      Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
     |      @flags will override the default saved into the file.  These two
     |      flags are mutually exclusive.
     |  
     |  mmaannaaggeeddSSaavveeRReemmoovvee(self, flags=0)
     |      Remove any managed save image for this domain.
     |  
     |  mmaaxxMMeemmoorryy(self)
     |      Retrieve the maximum amount of physical memory allocated to a
     |      domain. If domain is None, then this get the amount of memory reserved
     |      to Domain0 i.e. the domain where the application runs.
     |  
     |  mmaaxxVVccppuuss(self)
     |      Provides the maximum number of virtual CPUs supported for
     |      the guest VM. If the guest is inactive, this is basically
     |      the same as virConnectGetMaxVcpus(). If the guest is running
     |      this will reflect the maximum number of virtual CPUs the
     |      guest was booted with.  For more details, see virDomainGetVcpusFlags().
     |  
     |  mmeemmoorryyPPaarraammeetteerrss(self, flags=0)
     |      Get the memory parameters
     |  
     |  mmeemmoorryyPPeeeekk(self, start, size, flags=0)
     |      Read the contents of domain's memory
     |  
     |  mmeemmoorryySSttaattss(self)
     |      Extracts memory statistics for a domain
     |  
     |  mmeettaaddaattaa(self, type, uri, flags=0)
     |      Retrieves the appropriate domain element given by @type.
     |      If VIR_DOMAIN_METADATA_ELEMENT is requested parameter @uri
     |      must be set to the name of the namespace the requested elements
     |      belong to, otherwise must be None.
     |      
     |      If an element of the domain XML is not present, the resulting
     |      error will be VIR_ERR_NO_DOMAIN_METADATA.  This method forms
     |      a shortcut for seeing information from virDomainSetMetadata()
     |      without having to go through virDomainGetXMLDesc().
     |      
     |      @flags controls whether the live domain or persistent
     |      configuration will be queried.
     |  
     |  mmiiggrraattee(self, dconn, flags=0, dname=None, uri=None, bandwidth=0)
     |      Migrate the domain object from its current host to the destination
     |      host given by dconn (a connection to the destination host).
     |      
     |      Flags may be one of more of the following:
     |        VIR_MIGRATE_LIVE      Do not pause the VM during migration
     |        VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
     |        VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
     |        VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
     |                                 on the destination host.
     |        VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
     |                                    domain on the source host.
     |        VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
     |        VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
     |                                    disk copy
     |        VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
     |                                    incremental disk copy
     |        VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
     |                                      changes during the migration process (set
     |                                      automatically when supported).
     |        VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
     |        VIR_MIGRATE_OFFLINE Migrate offline
     |      
     |      VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
     |      Applications using the VIR_MIGRATE_PEER2PEER flag will probably
     |      prefer to invoke virDomainMigrateToURI, avoiding the need to
     |      open connection to the destination host themselves.
     |      
     |      If a hypervisor supports renaming domains during migration,
     |      then you may set the dname parameter to the new name (otherwise
     |      it keeps the same name).  If this is not supported by the
     |      hypervisor, dname must be None or else you will get an error.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is set, the uri parameter
     |      must be a valid libvirt connection URI, by which the source
     |      libvirt driver can connect to the destination libvirt. If
     |      omitted, the dconn connection object will be queried for its
     |      current URI.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is NOT set, the URI parameter
     |      takes a hypervisor specific format. The hypervisor capabilities
     |      XML includes details of the support URI schemes. If omitted
     |      the dconn will be asked for a default URI.
     |      
     |      If you want to copy non-shared storage within migration you
     |      can use either VIR_MIGRATE_NON_SHARED_DISK or
     |      VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.
     |      
     |      In either case it is typically only necessary to specify a
     |      URI if the destination host has multiple interfaces and a
     |      specific interface is required to transmit migration data.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter.  If set to 0,
     |      libvirt will choose a suitable default.  Some hypervisors do
     |      not support this feature and will return an error if bandwidth
     |      is not 0.
     |      
     |      To see which features are supported by the current hypervisor,
     |      see virConnectGetCapabilities, /capabilities/host/migration_features.
     |      
     |      There are many limitations on migration imposed by the underlying
     |      technology - for example it may not be possible to migrate between
     |      different processors even with the same architecture, or between
     |      different types of hypervisor.
     |  
     |  mmiiggrraattee22(self, dconn, dxml=None, flags=0, dname=None, uri=None, bandwidth=0)
     |      Migrate the domain object from its current host to the destination
     |      host given by dconn (a connection to the destination host).
     |      
     |      Flags may be one of more of the following:
     |        VIR_MIGRATE_LIVE      Do not pause the VM during migration
     |        VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
     |        VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
     |        VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
     |                                 on the destination host.
     |        VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
     |                                    domain on the source host.
     |        VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
     |        VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
     |                                    disk copy
     |        VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
     |                                    incremental disk copy
     |        VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
     |                                      changes during the migration process (set
     |                                      automatically when supported).
     |        VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
     |        VIR_MIGRATE_OFFLINE Migrate offline
     |      
     |      VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
     |      Applications using the VIR_MIGRATE_PEER2PEER flag will probably
     |      prefer to invoke virDomainMigrateToURI, avoiding the need to
     |      open connection to the destination host themselves.
     |      
     |      If a hypervisor supports renaming domains during migration,
     |      then you may set the dname parameter to the new name (otherwise
     |      it keeps the same name).  If this is not supported by the
     |      hypervisor, dname must be None or else you will get an error.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is set, the uri parameter
     |      must be a valid libvirt connection URI, by which the source
     |      libvirt driver can connect to the destination libvirt. If
     |      omitted, the dconn connection object will be queried for its
     |      current URI.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is NOT set, the URI parameter
     |      takes a hypervisor specific format. The hypervisor capabilities
     |      XML includes details of the support URI schemes. If omitted
     |      the dconn will be asked for a default URI.
     |      
     |      If you want to copy non-shared storage within migration you
     |      can use either VIR_MIGRATE_NON_SHARED_DISK or
     |      VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.
     |      
     |      In either case it is typically only necessary to specify a
     |      URI if the destination host has multiple interfaces and a
     |      specific interface is required to transmit migration data.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter.  If set to 0,
     |      libvirt will choose a suitable default.  Some hypervisors do
     |      not support this feature and will return an error if bandwidth
     |      is not 0.
     |      
     |      To see which features are supported by the current hypervisor,
     |      see virConnectGetCapabilities, /capabilities/host/migration_features.
     |      
     |      There are many limitations on migration imposed by the underlying
     |      technology - for example it may not be possible to migrate between
     |      different processors even with the same architecture, or between
     |      different types of hypervisor.
     |      
     |      If the hypervisor supports it, @dxml can be used to alter
     |      host-specific portions of the domain XML that will be used on
     |      the destination.  For example, it is possible to alter the
     |      backing filename that is associated with a disk device, in order
     |      to account for naming differences between source and destination
     |      in accessing the underlying storage.  The migration will fail
     |      if @dxml would cause any guest-visible changes.  Pass None
     |      if no changes are needed to the XML between source and destination.
     |      @dxml cannot be used to rename the domain during migration (use
     |      @dname for that purpose).  Domain name in @dxml must match the
     |      original domain name.
     |  
     |  mmiiggrraattee33(self, dconn, params, flags=0)
     |      Migrate the domain object from its current host to the destination host
     |      given by dconn (a connection to the destination host).
     |  
     |  mmiiggrraatteeGGeettCCoommpprreessssiioonnCCaacchhee(self, flags=0)
     |      Get current size of the cache (in bytes) used for compressing
     |      repeatedly transferred memory pages during live migration.
     |  
     |  mmiiggrraatteeGGeettMMaaxxSSppeeeedd(self, flags=0)
     |      Get currently configured maximum migration speed for a domain
     |  
     |  mmiiggrraatteeSSeettCCoommpprreessssiioonnCCaacchhee(self, cacheSize, flags=0)
     |      Sets size of the cache (in bytes) used for compressing repeatedly
     |      transferred memory pages during live migration. It's supposed to be called
     |      while the domain is being live-migrated as a reaction to migration progress
     |      and increasing number of compression cache misses obtained from
     |      virDomainGetJobStats.
     |  
     |  mmiiggrraatteeSSeettMMaaxxDDoowwnnttiimmee(self, downtime, flags=0)
     |      Sets maximum tolerable time for which the domain is allowed to be paused
     |      at the end of live migration. It's supposed to be called while the domain is
     |      being live-migrated as a reaction to migration progress.
     |  
     |  mmiiggrraatteeSSeettMMaaxxSSppeeeedd(self, bandwidth, flags=0)
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter. Not all hypervisors
     |      will support a bandwidth cap
     |  
     |  mmiiggrraatteeTTooUURRII(self, duri, flags=0, dname=None, bandwidth=0)
     |      Migrate the domain object from its current host to the destination
     |      host given by duri.
     |      
     |      Flags may be one of more of the following:
     |        VIR_MIGRATE_LIVE      Do not pause the VM during migration
     |        VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
     |        VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
     |        VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
     |                                 on the destination host.
     |        VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
     |                                    domain on the source host.
     |        VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
     |        VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
     |                                    disk copy
     |        VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
     |                                    incremental disk copy
     |        VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
     |                                      changes during the migration process (set
     |                                      automatically when supported).
     |        VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
     |        VIR_MIGRATE_OFFLINE Migrate offline
     |      
     |      The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.
     |      If the VIR_MIGRATE_PEER2PEER flag is NOT set, the duri parameter
     |      takes a hypervisor specific format. The uri_transports element of the
     |      hypervisor capabilities XML includes details of the supported URI
     |      schemes. Not all hypervisors will support this mode of migration, so
     |      if the VIR_MIGRATE_PEER2PEER flag is not set, then it may be necessary
     |      to use the alternative virDomainMigrate API providing and explicit
     |      virConnectPtr for the destination host.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag IS set, the duri parameter
     |      must be a valid libvirt connection URI, by which the source
     |      libvirt driver can connect to the destination libvirt.
     |      
     |      VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
     |      
     |      If you want to copy non-shared storage within migration you
     |      can use either VIR_MIGRATE_NON_SHARED_DISK or
     |      VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.
     |      
     |      If a hypervisor supports renaming domains during migration,
     |      the dname parameter specifies the new name for the domain.
     |      Setting dname to None keeps the domain name the same.  If domain
     |      renaming is not supported by the hypervisor, dname must be None or
     |      else an error will be returned.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter.  If set to 0,
     |      libvirt will choose a suitable default.  Some hypervisors do
     |      not support this feature and will return an error if bandwidth
     |      is not 0.
     |      
     |      To see which features are supported by the current hypervisor,
     |      see virConnectGetCapabilities, /capabilities/host/migration_features.
     |      
     |      There are many limitations on migration imposed by the underlying
     |      technology - for example it may not be possible to migrate between
     |      different processors even with the same architecture, or between
     |      different types of hypervisor.
     |  
     |  mmiiggrraatteeTTooUURRII22(self, dconnuri=None, miguri=None, dxml=None, flags=0, dname=None, bandwidth=0)
     |      Migrate the domain object from its current host to the destination
     |      host given by duri.
     |      
     |      Flags may be one of more of the following:
     |        VIR_MIGRATE_LIVE      Do not pause the VM during migration
     |        VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
     |        VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
     |        VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
     |                                 on the destination host.
     |        VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
     |                                    domain on the source host.
     |        VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
     |        VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
     |                                    disk copy
     |        VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
     |                                    incremental disk copy
     |        VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
     |                                      changes during the migration process (set
     |                                      automatically when supported).
     |        VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
     |        VIR_MIGRATE_OFFLINE Migrate offline
     |      
     |      The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.
     |      
     |      If the VIR_MIGRATE_PEER2PEER flag is set, the @dconnuri parameter
     |      must be a valid libvirt connection URI, by which the source
     |      libvirt driver can connect to the destination libvirt. If the
     |      VIR_MIGRATE_PEER2PEER flag is NOT set, then @dconnuri must be
     |      None.
     |      
     |      If the VIR_MIGRATE_TUNNELLED flag is NOT set, then the @miguri
     |      parameter allows specification of a URI to use to initiate the
     |      VM migration. It takes a hypervisor specific format. The uri_transports
     |      element of the hypervisor capabilities XML includes details of the
     |      supported URI schemes.
     |      
     |      VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
     |      
     |      If you want to copy non-shared storage within migration you
     |      can use either VIR_MIGRATE_NON_SHARED_DISK or
     |      VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.
     |      
     |      If a hypervisor supports changing the configuration of the guest
     |      during migration, the @dxml parameter specifies the new config
     |      for the guest. The configuration must include an identical set
     |      of virtual devices, to ensure a stable guest ABI across migration.
     |      Only parameters related to host side configuration can be
     |      changed in the XML. Hypervisors will validate this and refuse to
     |      allow migration if the provided XML would cause a change in the
     |      guest ABI,
     |      
     |      If a hypervisor supports renaming domains during migration,
     |      the dname parameter specifies the new name for the domain.
     |      Setting dname to None keeps the domain name the same.  If domain
     |      renaming is not supported by the hypervisor, dname must be None or
     |      else an error will be returned.
     |      
     |      The maximum bandwidth (in MiB/s) that will be used to do migration
     |      can be specified with the bandwidth parameter.  If set to 0,
     |      libvirt will choose a suitable default.  Some hypervisors do
     |      not support this feature and will return an error if bandwidth
     |      is not 0.
     |      
     |      To see which features are supported by the current hypervisor,
     |      see virConnectGetCapabilities, /capabilities/host/migration_features.
     |      
     |      There are many limitations on migration imposed by the underlying
     |      technology - for example it may not be possible to migrate between
     |      different processors even with the same architecture, or between
     |      different types of hypervisor.
     |  
     |  mmiiggrraatteeTTooUURRII33(self, dconnuri, params, flags=0)
     |      Migrate the domain object from its current host to the destination host
     |      given by URI.
     |  
     |  nnaammee(self)
     |      Get the public name for that domain
     |  
     |  nnuummaaPPaarraammeetteerrss(self, flags=0)
     |      Get the NUMA parameters
     |  
     |  ooppeennCChhaannnneell(self, name, st, flags=0)
     |      This opens the host interface associated with a channel device on a
     |      guest, if the host interface is supported.  If @name is given, it
     |      can match either the device alias (e.g. "channel0"), or the virtio
     |      target name (e.g. "org.qemu.guest_agent.0").  If @name is omitted,
     |      then the first channel is opened. The channel is associated with
     |      the passed in @st stream, which should have been opened in
     |      non-blocking mode for bi-directional I/O.
     |      
     |      By default, when @flags is 0, the open will fail if libvirt detects
     |      that the channel is already in use by another client; passing
     |      VIR_DOMAIN_CHANNEL_FORCE will cause libvirt to forcefully remove the
     |      other client prior to opening this channel.
     |  
     |  ooppeennCCoonnssoollee(self, dev_name, st, flags=0)
     |      This opens the backend associated with a console, serial or
     |      parallel port device on a guest, if the backend is supported.
     |      If the @dev_name is omitted, then the first console or serial
     |      device is opened. The console is associated with the passed
     |      in @st stream, which should have been opened in non-blocking
     |      mode for bi-directional I/O.
     |      
     |      By default, when @flags is 0, the open will fail if libvirt
     |      detects that the console is already in use by another client;
     |      passing VIR_DOMAIN_CONSOLE_FORCE will cause libvirt to forcefully
     |      remove the other client prior to opening this console.
     |      
     |      If flag VIR_DOMAIN_CONSOLE_SAFE the console is opened only in the
     |      case where the hypervisor driver supports safe (mutually exclusive)
     |      console handling.
     |      
     |      Older servers did not support either flag, and also did not forbid
     |      simultaneous clients on a console, with potentially confusing results.
     |      When passing @flags of 0 in order to support a wider range of server
     |      versions, it is up to the client to ensure mutual exclusion.
     |  
     |  ooppeennGGrraapphhiiccss(self, idx, fd, flags=0)
     |      This will attempt to connect the file descriptor @fd, to
     |      the graphics backend of @dom. If @dom has multiple graphics
     |      backends configured, then @idx will determine which one is
     |      opened, starting from @idx 0.
     |      
     |      To disable any authentication, pass the VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH
     |      constant for @flags.
     |      
     |      The caller should use an anonymous socketpair to open
     |      @fd before invocation.
     |      
     |      This method can only be used when connected to a local
     |      libvirt hypervisor, over a UNIX domain socket. Attempts
     |      to use this method over a TCP connection will always fail
     |  
     |  ppMMSSuussppeennddFFoorrDDuurraattiioonn(self, target, duration, flags=0)
     |      Attempt to have the guest enter the given @target power management
     |      suspension level.  If @duration is non-zero, also schedule the guest to
     |      resume normal operation after that many seconds, if nothing else has
     |      resumed it earlier.  Some hypervisors require that @duration be 0, for
     |      an indefinite suspension.
     |      
     |      Dependent on hypervisor used, this may require a
     |      guest agent to be available, e.g. QEMU.
     |      
     |      Beware that at least for QEMU, the domain's process will be terminated
     |      when VIR_NODE_SUSPEND_TARGET_DISK is used and a new process will be
     |      launched when libvirt is asked to wake up the domain. As a result of
     |      this, any runtime changes, such as device hotplug or memory settings,
     |      are lost unless such changes were made with VIR_DOMAIN_AFFECT_CONFIG
     |      flag.
     |  
     |  ppMMWWaakkeeuupp(self, flags=0)
     |      Inject a wakeup into the guest that previously used
     |      virDomainPMSuspendForDuration, rather than waiting for the
     |      previously requested duration (if any) to elapse.
     |  
     |  ppiinnEEmmuullaattoorr(self, cpumap, flags=0)
     |      Dynamically change the real CPUs which can be allocated to the emulator process of a domain.
     |      This function requires privileged access to the hypervisor.
     |  
     |  ppiinnVVccppuu(self, vcpu, cpumap)
     |      Dynamically change the real CPUs which can be allocated to a virtual CPU. This function requires privileged access to the hypervisor.
     |  
     |  ppiinnVVccppuuFFllaaggss(self, vcpu, cpumap, flags=0)
     |      Dynamically change the real CPUs which can be allocated to a virtual CPU. This function requires privileged access to the hypervisor.
     |  
     |  rreebboooott(self, flags=0)
     |      Reboot a domain, the domain object is still usable thereafter, but
     |      the domain OS is being stopped for a restart.
     |      Note that the guest OS may ignore the request.
     |      Additionally, the hypervisor may check and support the domain
     |      'on_reboot' XML setting resulting in a domain that shuts down instead
     |      of rebooting.
     |      
     |      If @flags is set to zero, then the hypervisor will choose the
     |      method of shutdown it considers best. To have greater control
     |      pass one or more of the virDomainShutdownFlagValues. The order
     |      in which the hypervisor tries each shutdown method is undefined,
     |      and a hypervisor is not required to support all methods.
     |      
     |      To use guest agent (VIR_DOMAIN_REBOOT_GUEST_AGENT) the domain XML
     |      must have <channel> configured.
     |  
     |  rreesseett(self, flags=0)
     |      Reset a domain immediately without any guest OS shutdown.
     |      Reset emulates the power reset button on a machine, where all
     |      hardware sees the RST line set and reinitializes internal state.
     |      
     |      Note that there is a risk of data loss caused by reset without any
     |      guest OS shutdown.
     |  
     |  rreessuummee(self)
     |      Resume a suspended domain, the process is restarted from the state where
     |      it was frozen by calling virDomainSuspend().
     |      This function may require privileged access
     |      Moreover, resume may not be supported if domain is in some
     |      special state like VIR_DOMAIN_PMSUSPENDED.
     |  
     |  rreevveerrttTTooSSnnaappsshhoott(self, snap, flags=0)
     |      revert the domain to the given snapshot
     |  
     |  ssaavvee(self, to)
     |      This method will suspend a domain and save its memory contents to
     |      a file on disk. After the call, if successful, the domain is not
     |      listed as running anymore (this ends the life of a transient domain).
     |      Use virDomainRestore() to restore a domain after saving.
     |      
     |      See virDomainSaveFlags() for more control.  Also, a save file can
     |      be inspected or modified slightly with virDomainSaveImageGetXMLDesc()
     |      and virDomainSaveImageDefineXML().
     |  
     |  ssaavveeFFllaaggss(self, to, dxml=None, flags=0)
     |      This method will suspend a domain and save its memory contents to
     |      a file on disk. After the call, if successful, the domain is not
     |      listed as running anymore (this ends the life of a transient domain).
     |      Use virDomainRestore() to restore a domain after saving.
     |      
     |      If the hypervisor supports it, @dxml can be used to alter
     |      host-specific portions of the domain XML that will be used when
     |      restoring an image.  For example, it is possible to alter the
     |      backing filename that is associated with a disk device, in order to
     |      prepare for file renaming done as part of backing up the disk
     |      device while the domain is stopped.
     |      
     |      If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
     |      attempt to bypass the file system cache while creating the file, or
     |      fail if it cannot do so for the given system; this can allow less
     |      pressure on file system cache, but also risks slowing saves to NFS.
     |      
     |      Normally, the saved state file will remember whether the domain was
     |      running or paused, and restore defaults to the same state.
     |      Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
     |      @flags will override what state gets saved into the file.  These
     |      two flags are mutually exclusive.
     |      
     |      A save file can be inspected or modified slightly with
     |      virDomainSaveImageGetXMLDesc() and virDomainSaveImageDefineXML().
     |      
     |      Some hypervisors may prevent this operation if there is a current
     |      block copy operation; in that case, use virDomainBlockJobAbort()
     |      to stop the block copy first.
     |  
     |  sscchheedduulleerrPPaarraammeetteerrss(self)
     |      Get the scheduler parameters, the @params array will be filled with the values.
     |  
     |  sscchheedduulleerrPPaarraammeetteerrssFFllaaggss(self, flags=0)
     |      Get the scheduler parameters
     |  
     |  sscchheedduulleerrTTyyppee(self)
     |      Get the scheduler type.
     |  
     |  ssccrreeeennsshhoott(self, stream, screen, flags=0)
     |      Take a screenshot of current domain console as a stream. The image format
     |      is hypervisor specific. Moreover, some hypervisors supports multiple
     |      displays per domain. These can be distinguished by @screen argument.
     |      
     |      This call sets up a stream; subsequent use of stream API is necessary
     |      to transfer actual data, determine how much data is successfully
     |      transferred, and detect any errors.
     |      
     |      The screen ID is the sequential number of screen. In case of multiple
     |      graphics cards, heads are enumerated before devices, e.g. having
     |      two graphics cards, both with four heads, screen ID 5 addresses
     |      the second head on the second card.
     |  
     |  sseennddKKeeyy(self, codeset, holdtime, keycodes, nkeycodes, flags=0)
     |      Send key(s) to the guest.
     |  
     |  sseennddPPrroocceessssSSiiggnnaall(self, pid_value, signum, flags=0)
     |      Send a signal to the designated process in the guest
     |      
     |      The signal numbers must be taken from the virDomainProcessSignal
     |      enum. These will be translated to the corresponding signal
     |      number for the guest OS, by the guest agent delivering the
     |      signal. If there is no mapping from virDomainProcessSignal to
     |      the native OS signals, this API will report an error.
     |      
     |      If @pid_value is an integer greater than zero, it is
     |      treated as a process ID. If @pid_value is an integer
     |      less than zero, it is treated as a process group ID.
     |      All the @pid_value numbers are from the container/guest
     |      namespace. The value zero is not valid.
     |      
     |      Not all hypervisors will support sending signals to
     |      arbitrary processes or process groups. If this API is
     |      implemented the minimum requirement is to be able to
     |      use @pid_value==1 (i.e. kill init). No other value is
     |      required to be supported.
     |      
     |      If the @signum is VIR_DOMAIN_PROCESS_SIGNAL_NOP then this
     |      API will simply report whether the process is running in
     |      the container/guest.
     |  
     |  sseettAAuuttoossttaarrtt(self, autostart)
     |      Configure the domain to be automatically started
     |      when the host machine boots.
     |  
     |  sseettBBllkkiiooPPaarraammeetteerrss(self, params, flags=0)
     |      Change the blkio tunables
     |  
     |  sseettBBlloocckkIIooTTuunnee(self, disk, params, flags=0)
     |      Change the I/O tunables for a block device
     |  
     |  sseettIInntteerrffaacceePPaarraammeetteerrss(self, device, params, flags=0)
     |      Change the bandwidth tunables for a interface device
     |  
     |  sseettMMaaxxMMeemmoorryy(self, memory)
     |      Dynamically change the maximum amount of physical memory allocated to a
     |      domain. If domain is None, then this change the amount of memory reserved
     |      to Domain0 i.e. the domain where the application runs.
     |      This function may require privileged access to the hypervisor.
     |      
     |      This command is hypervisor-specific for whether active, persistent,
     |      or both configurations are changed; for more control, use
     |      virDomainSetMemoryFlags().
     |  
     |  sseettMMeemmoorryy(self, memory)
     |      Dynamically change the target amount of physical memory allocated to a
     |      domain. If domain is None, then this change the amount of memory reserved
     |      to Domain0 i.e. the domain where the application runs.
     |      This function may require privileged access to the hypervisor.
     |      
     |      This command only changes the runtime configuration of the domain,
     |      so can only be called on an active domain.
     |  
     |  sseettMMeemmoorryyFFllaaggss(self, memory, flags=0)
     |      Dynamically change the target amount of physical memory allocated to a
     |      domain. If domain is None, then this change the amount of memory reserved
     |      to Domain0 i.e. the domain where the application runs.
     |      This function may require privileged access to the hypervisor.
     |      
     |      @flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
     |      Both flags may be set. If VIR_DOMAIN_AFFECT_LIVE is set, the change affects
     |      a running domain and will fail if domain is not active.
     |      If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
     |      and will fail for transient domains. If neither flag is specified
     |      (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain
     |      modifies persistent setup, while an active domain is hypervisor-dependent
     |      on whether just live or both live and persistent state is changed.
     |      If VIR_DOMAIN_MEM_MAXIMUM is set, the change affects domain's maximum memory
     |      size rather than current memory size.
     |      Not all hypervisors can support all flag combinations.
     |  
     |  sseettMMeemmoorryyPPaarraammeetteerrss(self, params, flags=0)
     |      Change the memory tunables
     |  
     |  sseettMMeemmoorryySSttaattssPPeerriioodd(self, period, flags=0)
     |      Dynamically change the domain memory balloon driver statistics collection
     |      period. Use 0 to disable and a positive value to enable.
     |      
     |      @flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
     |      Both flags may be set. If VIR_DOMAIN_AFFECT_LIVE is set, the change affects
     |      a running domain and will fail if domain is not active.
     |      If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
     |      and will fail for transient domains. If neither flag is specified
     |      (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain
     |      modifies persistent setup, while an active domain is hypervisor-dependent
     |      on whether just live or both live and persistent state is changed.
     |      
     |      Not all hypervisors can support all flag combinations.
     |  
     |  sseettMMeettaaddaattaa(self, type, metadata, key, uri, flags=0)
     |      Sets the appropriate domain element given by @type to the
     |      value of @description.  A @type of VIR_DOMAIN_METADATA_DESCRIPTION
     |      is free-form text; VIR_DOMAIN_METADATA_TITLE is free-form, but no
     |      newlines are permitted, and should be short (although the length is
     |      not enforced). For these two options @key and @uri are irrelevant and
     |      must be set to None.
     |      
     |      For type VIR_DOMAIN_METADATA_ELEMENT @metadata  must be well-formed
     |      XML belonging to namespace defined by @uri with local name @key.
     |      
     |      Passing None for @metadata says to remove that element from the
     |      domain XML (passing the empty string leaves the element present).
     |      
     |      The resulting metadata will be present in virDomainGetXMLDesc(),
     |      as well as quick access through virDomainGetMetadata().
     |      
     |      @flags controls whether the live domain, persistent configuration,
     |      or both will be modified.
     |  
     |  sseettNNuummaaPPaarraammeetteerrss(self, params, flags=0)
     |      Change the NUMA tunables
     |  
     |  sseettSScchheedduulleerrPPaarraammeetteerrss(self, params)
     |      Change the scheduler parameters
     |  
     |  sseettSScchheedduulleerrPPaarraammeetteerrssFFllaaggss(self, params, flags=0)
     |      Change the scheduler parameters
     |  
     |  sseettVVccppuuss(self, nvcpus)
     |      Dynamically change the number of virtual CPUs used by the domain.
     |      Note that this call may fail if the underlying virtualization hypervisor
     |      does not support it or if growing the number is arbitrary limited.
     |      This function may require privileged access to the hypervisor.
     |      
     |      This command only changes the runtime configuration of the domain,
     |      so can only be called on an active domain.  It is hypervisor-dependent
     |      whether it also affects persistent configuration; for more control,
     |      use virDomainSetVcpusFlags().
     |  
     |  sseettVVccppuussFFllaaggss(self, nvcpus, flags=0)
     |      Dynamically change the number of virtual CPUs used by the domain.
     |      Note that this call may fail if the underlying virtualization hypervisor
     |      does not support it or if growing the number is arbitrary limited.
     |      This function may require privileged access to the hypervisor.
     |      
     |      @flags may include VIR_DOMAIN_AFFECT_LIVE to affect a running
     |      domain (which may fail if domain is not active), or
     |      VIR_DOMAIN_AFFECT_CONFIG to affect the next boot via the XML
     |      description of the domain.  Both flags may be set.
     |      If neither flag is specified (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT),
     |      then an inactive domain modifies persistent setup, while an active domain
     |      is hypervisor-dependent on whether just live or both live and persistent
     |      state is changed.
     |      
     |      If @flags includes VIR_DOMAIN_VCPU_MAXIMUM, then
     |      VIR_DOMAIN_AFFECT_LIVE must be clear, and only the maximum virtual
     |      CPU limit is altered; generally, this value must be less than or
     |      equal to virConnectGetMaxVcpus().  Otherwise, this call affects the
     |      current virtual CPU limit, which must be less than or equal to the
     |      maximum limit.
     |      
     |      If @flags includes VIR_DOMAIN_VCPU_GUEST, then the state of processors is
     |      modified inside the guest instead of the hypervisor. This flag can only
     |      be used with live guests and is incompatible with VIR_DOMAIN_VCPU_MAXIMUM.
     |      The usage of this flag may require a guest agent configured.
     |      
     |      Not all hypervisors can support all flag combinations.
     |  
     |  sshhuuttddoowwnn(self)
     |      Shutdown a domain, the domain object is still usable thereafter, but
     |      the domain OS is being stopped. Note that the guest OS may ignore the
     |      request. Additionally, the hypervisor may check and support the domain
     |      'on_poweroff' XML setting resulting in a domain that reboots instead of
     |      shutting down. For guests that react to a shutdown request, the differences
     |      from virDomainDestroy() are that the guests disk storage will be in a
     |      stable state rather than having the (virtual) power cord pulled, and
     |      this command returns as soon as the shutdown request is issued rather
     |      than blocking until the guest is no longer running.
     |      
     |      If the domain is transient and has any snapshot metadata (see
     |      virDomainSnapshotNum()), then that metadata will automatically
     |      be deleted when the domain quits.
     |  
     |  sshhuuttddoowwnnFFllaaggss(self, flags=0)
     |      Shutdown a domain, the domain object is still usable thereafter but
     |      the domain OS is being stopped. Note that the guest OS may ignore the
     |      request. Additionally, the hypervisor may check and support the domain
     |      'on_poweroff' XML setting resulting in a domain that reboots instead of
     |      shutting down. For guests that react to a shutdown request, the differences
     |      from virDomainDestroy() are that the guest's disk storage will be in a
     |      stable state rather than having the (virtual) power cord pulled, and
     |      this command returns as soon as the shutdown request is issued rather
     |      than blocking until the guest is no longer running.
     |      
     |      If the domain is transient and has any snapshot metadata (see
     |      virDomainSnapshotNum()), then that metadata will automatically
     |      be deleted when the domain quits.
     |      
     |      If @flags is set to zero, then the hypervisor will choose the
     |      method of shutdown it considers best. To have greater control
     |      pass one or more of the virDomainShutdownFlagValues. The order
     |      in which the hypervisor tries each shutdown method is undefined,
     |      and a hypervisor is not required to support all methods.
     |  
     |  ssnnaappsshhoottCCrreeaatteeXXMMLL(self, xmlDesc, flags=0)
     |      Creates a new snapshot of a domain based on the snapshot xml
     |      contained in xmlDesc.
     |      
     |      If @flags is 0, the domain can be active, in which case the
     |      snapshot will be a system checkpoint (both disk state and runtime
     |      VM state such as RAM contents), where reverting to the snapshot is
     |      the same as resuming from hibernation (TCP connections may have
     |      timed out, but everything else picks up where it left off); or
     |      the domain can be inactive, in which case the snapshot includes
     |      just the disk state prior to booting.  The newly created snapshot
     |      becomes current (see virDomainSnapshotCurrent()), and is a child
     |      of any previous current snapshot.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE, then this
     |      is a request to reinstate snapshot metadata that was previously
     |      discarded, rather than creating a new snapshot.  This can be used
     |      to recreate a snapshot hierarchy on a destination, then remove it
     |      on the source, in order to allow migration (since migration
     |      normally fails if snapshot metadata still remains on the source
     |      machine).  When redefining snapshot metadata, the current snapshot
     |      will not be altered unless the VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT
     |      flag is also present.  It is an error to request the
     |      VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT flag without
     |      VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.  On some hypervisors,
     |      redefining an existing snapshot can be used to alter host-specific
     |      portions of the domain XML to be used during revert (such as
     |      backing filenames associated with disk devices), but must not alter
     |      guest-visible layout.  When redefining a snapshot name that does
     |      not exist, the hypervisor may validate that reverting to the
     |      snapshot appears to be possible (for example, disk images have
     |      snapshot contents by the requested name).  Not all hypervisors
     |      support these flags.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA, then the
     |      domain's disk images are modified according to @xmlDesc, but then
     |      the just-created snapshot has its metadata deleted.  This flag is
     |      incompatible with VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_HALT, then the domain
     |      will be inactive after the snapshot completes, regardless of whether
     |      it was active before; otherwise, a running domain will still be
     |      running after the snapshot.  This flag is invalid on transient domains,
     |      and is incompatible with VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_LIVE, then the domain
     |      is not paused while creating the snapshot. This increases the size
     |      of the memory dump file, but reduces downtime of the guest while
     |      taking the snapshot. Some hypervisors only support this flag during
     |      external checkpoints.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY, then the
     |      snapshot will be limited to the disks described in @xmlDesc, and no
     |      VM state will be saved.  For an active guest, the disk image may be
     |      inconsistent (as if power had been pulled), and specifying this
     |      with the VIR_DOMAIN_SNAPSHOT_CREATE_HALT flag risks data loss.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE, then the
     |      libvirt will attempt to use guest agent to freeze and thaw all
     |      file systems in use within domain OS. However, if the guest agent
     |      is not present, an error is thrown. Moreover, this flag requires
     |      VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY to be passed as well.
     |      
     |      By default, if the snapshot involves external files, and any of the
     |      destination files already exist as a non-empty regular file, the
     |      snapshot is rejected to avoid losing contents of those files.
     |      However, if @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT,
     |      then the destination files must already exist and contain content
     |      identical to the source files (this allows a management app to
     |      pre-create files with relative backing file names, rather than the
     |      default of creating with absolute backing file names).
     |      
     |      Be aware that although libvirt prefers to report errors up front with
     |      no other effect, some hypervisors have certain types of failures where
     |      the overall command can easily fail even though the guest configuration
     |      was partially altered (for example, if a disk snapshot request for two
     |      disks fails on the second disk, but the first disk alteration cannot be
     |      rolled back).  If this API call fails, it is therefore normally
     |      necessary to follow up with virDomainGetXMLDesc() and check each disk
     |      to determine if any partial changes occurred.  However, if @flags
     |      contains VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC, then libvirt guarantees
     |      that this command will not alter any disks unless the entire set of
     |      changes can be done atomically, making failure recovery simpler (note
     |      that it is still possible to fail after disks have changed, but only
     |      in the much rarer cases of running out of memory or disk space).
     |      
     |      Some hypervisors may prevent this operation if there is a current
     |      block copy operation; in that case, use virDomainBlockJobAbort()
     |      to stop the block copy first.
     |  
     |  ssnnaappsshhoottCCuurrrreenntt(self, flags=0)
     |      Get the current snapshot for a domain, if any.
     |  
     |  ssnnaappsshhoottLLiissttNNaammeess(self, flags=0)
     |      collect the list of snapshot names for the given domain
     |  
     |  ssnnaappsshhoottLLooookkuuppBByyNNaammee(self, name, flags=0)
     |      Try to lookup a domain snapshot based on its name.
     |  
     |  ssnnaappsshhoottNNuumm(self, flags=0)
     |      Provides the number of domain snapshots for this domain.
     |      
     |      By default, this command covers all snapshots; it is also possible to
     |      limit things to just snapshots with no parents, when @flags includes
     |      VIR_DOMAIN_SNAPSHOT_LIST_ROOTS.  Additional filters are provided in
     |      groups, where each group contains bits that describe mutually exclusive
     |      attributes of a snapshot, and where all bits within a group describe
     |      all possible snapshots.  Some hypervisors might reject explicit bits
     |      from a group where the hypervisor cannot make a distinction.  For a
     |      group supported by a given hypervisor, the behavior when no bits of a
     |      group are set is identical to the behavior when all bits in that group
     |      are set.  When setting bits from more than one group, it is possible to
     |      select an impossible combination, in that case a hypervisor may return
     |      either 0 or an error.
     |      
     |      The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
     |      VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
     |      have no further children (a leaf snapshot).
     |      
     |      The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
     |      VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
     |      whether they have metadata that would prevent the removal of the last
     |      reference to a domain.
     |      
     |      The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
     |      VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
     |      for filtering snapshots based on what domain state is tracked by the
     |      snapshot.
     |      
     |      The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
     |      VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
     |      whether the snapshot is stored inside the disk images or as
     |      additional files.
     |  
     |  ssttaattee(self, flags=0)
     |      Extract domain state.
     |  
     |  ssuussppeenndd(self)
     |      Suspends an active domain, the process is frozen without further access
     |      to CPU resources and I/O but the memory used by the domain at the
     |      hypervisor level will stay allocated. Use virDomainResume() to reactivate
     |      the domain.
     |      This function may require privileged access.
     |      Moreover, suspend may not be supported if domain is in some
     |      special state like VIR_DOMAIN_PMSUSPENDED.
     |  
     |  uunnddeeffiinnee(self)
     |      Undefine a domain. If the domain is running, it's converted to
     |      transient domain, without stopping it. If the domain is inactive,
     |      the domain configuration is removed.
     |      
     |      If the domain has a managed save image (see
     |      virDomainHasManagedSaveImage()), or if it is inactive and has any
     |      snapshot metadata (see virDomainSnapshotNum()), then the undefine will
     |      fail. See virDomainUndefineFlags() for more control.
     |  
     |  uunnddeeffiinneeFFllaaggss(self, flags=0)
     |      Undefine a domain. If the domain is running, it's converted to
     |      transient domain, without stopping it. If the domain is inactive,
     |      the domain configuration is removed.
     |      
     |      If the domain has a managed save image (see virDomainHasManagedSaveImage()),
     |      then including VIR_DOMAIN_UNDEFINE_MANAGED_SAVE in @flags will also remove
     |      that file, and omitting the flag will cause the undefine process to fail.
     |      
     |      If the domain is inactive and has any snapshot metadata (see
     |      virDomainSnapshotNum()), then including
     |      VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA in @flags will also remove
     |      that metadata.  Omitting the flag will cause the undefine of an
     |      inactive domain to fail.  Active snapshots will retain snapshot
     |      metadata until the (now-transient) domain halts, regardless of
     |      whether this flag is present.  On hypervisors where snapshots do
     |      not use libvirt metadata, this flag has no effect.
     |  
     |  uuppddaatteeDDeevviicceeFFllaaggss(self, xml, flags=0)
     |      Change a virtual device on a domain, using the flags parameter
     |      to control how the device is changed.  VIR_DOMAIN_AFFECT_CURRENT
     |      specifies that the device change is made based on current domain
     |      state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
     |      changed on the active domain instance only and is not added to the
     |      persisted domain configuration. VIR_DOMAIN_AFFECT_CONFIG
     |      specifies that the device shall be changed on the persisted domain
     |      configuration only.  Note that the target hypervisor must return an
     |      error if unable to satisfy flags.  E.g. the hypervisor driver will
     |      return failure if LIVE is specified but it only supports modifying the
     |      persisted device allocation.
     |      
     |      This method is used for actions such changing CDROM/Floppy device
     |      media, altering the graphics configuration such as password,
     |      reconfiguring the NIC device backend connectivity, etc.
     |  
     |  vvccppuuPPiinnIInnffoo(self, flags=0)
     |      Query the CPU affinity setting of all virtual CPUs of domain
     |  
     |  vvccppuuss(self)
     |      Extract information about virtual CPUs of domain, store it in info array and also in cpumaps if this pointer is'nt None.
     |  
     |  vvccppuussFFllaaggss(self, flags=0)
     |      Query the number of virtual CPUs used by the domain.  Note that
     |      this call may fail if the underlying virtualization hypervisor does
     |      not support it.  This function may require privileged access to the
     |      hypervisor.
     |      
     |      If @flags includes VIR_DOMAIN_AFFECT_LIVE, this will query a
     |      running domain (which will fail if domain is not active); if
     |      it includes VIR_DOMAIN_AFFECT_CONFIG, this will query the XML
     |      description of the domain.  It is an error to set both flags.
     |      If neither flag is set (that is, VIR_DOMAIN_AFFECT_CURRENT),
     |      then the configuration queried depends on whether the domain
     |      is currently running.
     |      
     |      If @flags includes VIR_DOMAIN_VCPU_MAXIMUM, then the maximum
     |      virtual CPU limit is queried.  Otherwise, this call queries the
     |      current virtual CPU count.
     |      
     |      If @flags includes VIR_DOMAIN_VCPU_GUEST, then the state of the processors
     |      is modified in the guest instead of the hypervisor. This flag is only usable
     |      on live domains. Guest agent may be needed for this flag to be available.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrDDoommaaiinnSSnnaappsshhoott(__builtin__.object)
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, dom, _obj=None)
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ddeelleettee(self, flags=0)
     |      Delete the snapshot.
     |      
     |      If @flags is 0, then just this snapshot is deleted, and changes
     |      from this snapshot are automatically merged into children
     |      snapshots.  If @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN,
     |      then this snapshot and any descendant snapshots are deleted.  If
     |      @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY, then any
     |      descendant snapshots are deleted, but this snapshot remains.  These
     |      two flags are mutually exclusive.
     |      
     |      If @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY, then
     |      any snapshot metadata tracked by libvirt is removed while keeping
     |      the snapshot contents intact; if a hypervisor does not require any
     |      libvirt metadata to track snapshots, then this flag is silently
     |      ignored.
     |  
     |  ddoommaaiinn(self)
     |  
     |  ggeettCCoonnnneecctt(self)
     |      Get the connection that owns the domain that a snapshot was created for
     |  
     |  ggeettDDoommaaiinn(self)
     |      Get the domain that a snapshot was created for
     |  
     |  ggeettNNaammee(self)
     |      Get the public name for that snapshot
     |  
     |  ggeettPPaarreenntt(self, flags=0)
     |      Get the parent snapshot for @snapshot, if any.
     |  
     |  ggeettXXMMLLDDeesscc(self, flags=0)
     |      Provide an XML description of the domain snapshot.
     |      
     |      No security-sensitive data will be included unless @flags contains
     |      VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
     |      connections.  For this API, @flags should not contain either
     |      VIR_DOMAIN_XML_INACTIVE or VIR_DOMAIN_XML_UPDATE_CPU.
     |  
     |  hhaassMMeettaaddaattaa(self, flags=0)
     |      Determine if the given snapshot is associated with libvirt metadata
     |      that would prevent the deletion of the domain.
     |  
     |  iissCCuurrrreenntt(self, flags=0)
     |      Determine if the given snapshot is the domain's current snapshot.  See
     |      also virDomainHasCurrentSnapshot().
     |  
     |  lliissttAAllllCChhiillddrreenn(self, flags=0)
     |      List all child snapshots and returns a list of snapshot objects
     |  
     |  lliissttCChhiillddrreennNNaammeess(self, flags=0)
     |      collect the list of child snapshot names for the given snapshot
     |  
     |  nnuummCChhiillddrreenn(self, flags=0)
     |      Provides the number of child snapshots for this domain snapshot.
     |      
     |      By default, this command covers only direct children; it is also possible
     |      to expand things to cover all descendants, when @flags includes
     |      VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS.  Also, some filters are provided in
     |      groups, where each group contains bits that describe mutually exclusive
     |      attributes of a snapshot, and where all bits within a group describe
     |      all possible snapshots.  Some hypervisors might reject explicit bits
     |      from a group where the hypervisor cannot make a distinction.  For a
     |      group supported by a given hypervisor, the behavior when no bits of a
     |      group are set is identical to the behavior when all bits in that group
     |      are set.  When setting bits from more than one group, it is possible to
     |      select an impossible combination, in that case a hypervisor may return
     |      either 0 or an error.
     |      
     |      The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
     |      VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
     |      have no further children (a leaf snapshot).
     |      
     |      The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
     |      VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
     |      whether they have metadata that would prevent the removal of the last
     |      reference to a domain.
     |      
     |      The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
     |      VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
     |      for filtering snapshots based on what domain state is tracked by the
     |      snapshot.
     |      
     |      The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
     |      VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
     |      whether the snapshot is stored inside the disk images or as
     |      additional files.
     |  
     |  rreeff(self)
     |      Increment the reference count on the snapshot. For each
     |      additional call to this method, there shall be a corresponding
     |      call to virDomainSnapshotFree to release the reference count, once
     |      the caller no longer needs the reference to this object.
     |      
     |      This method is typically useful for applications where multiple
     |      threads are using a connection, and it is required that the
     |      connection and domain remain open until all threads have finished
     |      using the snapshot. ie, each new thread using a snapshot would
     |      increment the reference count.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrIInntteerrffaaccee(__builtin__.object)
     |  Methods defined here:
     |  
     |  MMAACCSSttrriinngg(self)
     |      Get the MAC for an interface as string. For more information about
     |      MAC see RFC4122.
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      VIR_INTERFACE_XML_INACTIVE - return the static configuration,
     |                                        suitable for use redefining the
     |                                        interface via virInterfaceDefineXML()
     |      
     |      Provide an XML description of the interface. If
     |      VIR_INTERFACE_XML_INACTIVE is set, the description may be reused
     |      later to redefine the interface with virInterfaceDefineXML(). If it
     |      is not set, the ip address and netmask will be the current live
     |      setting of the interface, not the settings from the config files.
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ccrreeaattee(self, flags=0)
     |      Activate an interface (i.e. call "ifup").
     |      
     |      If there was an open network config transaction at the time this
     |      interface was defined (that is, if virInterfaceChangeBegin() had
     |      been called), the interface will be brought back down (and then
     |      undefined) if virInterfaceChangeRollback() is called.
     |      p *
     |  
     |  ddeessttrrooyy(self, flags=0)
     |      deactivate an interface (ie call "ifdown")
     |      This does not remove the interface from the config, and
     |      does not free the associated virInterfacePtr object.
     |      
     |      If there is an open network config transaction at the time this
     |      interface is destroyed (that is, if virInterfaceChangeBegin() had
     |      been called), and if the interface is later undefined and then
     |      virInterfaceChangeRollback() is called, the restoral of the
     |      interface definition will also bring the interface back up.
     |  
     |  iissAAccttiivvee(self)
     |      Determine if the interface is currently running
     |  
     |  nnaammee(self)
     |      Get the public name for that interface
     |  
     |  uunnddeeffiinnee(self)
     |      Undefine an interface, ie remove it from the config.
     |      This does not free the associated virInterfacePtr object.
     |      
     |      Normally this change in the interface configuration is
     |      permanent/persistent, but if virInterfaceChangeBegin() has been
     |      previously called (i.e. if an interface config transaction is
     |      open), the removal of the interface definition will only become
     |      permanent if virInterfaceChangeCommit() is called prior to the next
     |      reboot of the system running libvirtd. Prior to that time, the
     |      definition can be explicitly restored using
     |      virInterfaceChangeRollback(), or will be automatically restored
     |      during the next reboot of the system running libvirtd.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrNNWWFFiilltteerr(__builtin__.object)
     |  Methods defined here:
     |  
     |  UUUUIIDD(self)
     |      Extract the UUID unique Identifier of a network filter.
     |  
     |  UUUUIIDDSSttrriinngg(self)
     |      Fetch globally unique ID of the network filter as a string.
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Provide an XML description of the network filter. The description may be
     |      reused later to redefine the network filter with virNWFilterCreateXML().
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  ccoonnnneecctt(self)
     |  
     |  nnaammee(self)
     |      Get the public name for the network filter
     |  
     |  uunnddeeffiinnee(self)
     |      Undefine the nwfilter object. This call will not succeed if
     |      a running VM is referencing the filter. This does not free the
     |      associated virNWFilterPtr object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrNNeettwwoorrkk(__builtin__.object)
     |  Methods defined here:
     |  
     |  UUUUIIDD(self)
     |      Extract the UUID unique Identifier of a network.
     |  
     |  UUUUIIDDSSttrriinngg(self)
     |      Fetch globally unique ID of the network as a string.
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Provide an XML description of the network. The description may be reused
     |      later to relaunch the network with virNetworkCreateXML().
     |      
     |      Normally, if a network included a physical function, the output includes
     |      all virtual functions tied to that physical interface.  If @flags includes
     |      VIR_NETWORK_XML_INACTIVE, then the expansion of virtual interfaces is
     |      not performed.
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  aauuttoossttaarrtt(self)
     |      Extract the autostart flag for a network.
     |  
     |  bbrriiddggeeNNaammee(self)
     |      Provides a bridge interface name to which a domain may connect
     |      a network interface in order to join the network.
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ccrreeaattee(self)
     |      Create and start a defined network. If the call succeed the network
     |      moves from the defined to the running networks pools.
     |  
     |  ddeessttrrooyy(self)
     |      Destroy the network object. The running instance is shutdown if not down
     |      already and all resources used by it are given back to the hypervisor. This
     |      does not free the associated virNetworkPtr object.
     |      This function may require privileged access
     |  
     |  iissAAccttiivvee(self)
     |      Determine if the network is currently running
     |  
     |  iissPPeerrssiisstteenntt(self)
     |      Determine if the network has a persistent configuration
     |      which means it will still exist after shutting down
     |  
     |  nnaammee(self)
     |      Get the public name for that network
     |  
     |  sseettAAuuttoossttaarrtt(self, autostart)
     |      Configure the network to be automatically started
     |      when the host machine boots.
     |  
     |  uunnddeeffiinnee(self)
     |      Undefine a network but does not stop it if it is running
     |  
     |  uuppddaattee(self, command, section, parentIndex, xml, flags=0)
     |      Update the definition of an existing network, either its live
     |      running state, its persistent configuration, or both.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrNNooddeeDDeevviiccee(__builtin__.object)
     |  Methods defined here:
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Fetch an XML document describing all aspects of
     |      the device.
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ddeessttrrooyy(self)
     |      Destroy the device object. The virtual device is removed from the host operating system.
     |      This function may require privileged access
     |  
     |  ddeettaacchhFFllaaggss(self, driverName, flags=0)
     |      Detach the node device from the node itself so that it may be
     |      assigned to a guest domain.
     |      
     |      Depending on the hypervisor, this may involve operations such as
     |      unbinding any device drivers from the device, binding the device to
     |      a dummy device driver and resetting the device. Different backend
     |      drivers expect the device to be bound to different dummy
     |      devices. For example, QEMU's "kvm" backend driver (the default)
     |      expects the device to be bound to "pci-stub", but its "vfio"
     |      backend driver expects the device to be bound to "vfio-pci".
     |      
     |      If the device is currently in use by the node, this method may
     |      fail.
     |      
     |      Once the device is not assigned to any guest, it may be re-attached
     |      to the node using the virNodeDeviceReAttach() method.
     |  
     |  ddeettttaacchh(self)
     |      Dettach the node device from the node itself so that it may be
     |      assigned to a guest domain.
     |      
     |      Depending on the hypervisor, this may involve operations such
     |      as unbinding any device drivers from the device, binding the
     |      device to a dummy device driver and resetting the device.
     |      
     |      If the device is currently in use by the node, this method may
     |      fail.
     |      
     |      Once the device is not assigned to any guest, it may be re-attached
     |      to the node using the virNodeDeviceReattach() method.
     |      
     |      If the caller needs control over which backend driver will be used
     |      during PCI device assignment (to use something other than the
     |      default, for example VFIO), the newer virNodeDeviceDetachFlags()
     |      API should be used instead.
     |  
     |  lliissttCCaappss(self)
     |      list the node device's capabilities
     |  
     |  nnaammee(self)
     |      Just return the device name
     |  
     |  nnuummOOffCCaappss(self)
     |      Accessor for the number of capabilities supported by the device.
     |  
     |  ppaarreenntt(self)
     |      Accessor for the parent of the device
     |  
     |  rreeAAttttaacchh(self)
     |      Re-attach a previously dettached node device to the node so that it
     |      may be used by the node again.
     |      
     |      Depending on the hypervisor, this may involve operations such
     |      as resetting the device, unbinding it from a dummy device driver
     |      and binding it to its appropriate driver.
     |      
     |      If the device is currently in use by a guest, this method may fail.
     |  
     |  rreesseett(self)
     |      Reset a previously dettached node device to the node before or
     |      after assigning it to a guest.
     |      
     |      The exact reset semantics depends on the hypervisor and device
     |      type but, for example, KVM will attempt to reset PCI devices with
     |      a Function Level Reset, Secondary Bus Reset or a Power Management
     |      D-State reset.
     |      
     |      If the reset will affect other devices which are currently in use,
     |      this function may fail.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrSSeeccrreett(__builtin__.object)
     |  Methods defined here:
     |  
     |  UUUUIIDD(self)
     |      Extract the UUID unique Identifier of a secret.
     |  
     |  UUUUIIDDSSttrriinngg(self)
     |      Fetch globally unique ID of the secret as a string.
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Fetches an XML document describing attributes of the secret.
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  ccoonnnneecctt(self)
     |  
     |  sseettVVaalluuee(self, value, flags=0)
     |      Associates a value with a secret.
     |  
     |  uunnddeeffiinnee(self)
     |      Deletes the specified secret.  This does not free the associated
     |      virSecretPtr object.
     |  
     |  uussaaggeeIIDD(self)
     |      Get the unique identifier of the object with which this
     |      secret is to be used. The format of the identifier is
     |      dependant on the usage type of the secret. For a secret
     |      with a usage type of VIR_SECRET_USAGE_TYPE_VOLUME the
     |      identifier will be a fully qualfied path name. The
     |      identifiers are intended to be unique within the set of
     |      all secrets sharing the same usage type. ie, there shall
     |      only ever be one secret for each volume path.
     |  
     |  uussaaggeeTTyyppee(self)
     |      Get the type of object which uses this secret. The returned
     |      value is one of the constants defined in the virSecretUsageType
     |      enumeration. More values may be added to this enumeration in
     |      the future, so callers should expect to see usage types they
     |      do not explicitly know about.
     |  
     |  vvaalluuee(self, flags=0)
     |      Fetches the value associated with a secret.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrSSttoorraaggeePPooooll(__builtin__.object)
     |  Methods defined here:
     |  
     |  UUUUIIDD(self)
     |      Extract the UUID unique Identifier of a storage pool.
     |  
     |  UUUUIIDDSSttrriinngg(self)
     |      Fetch globally unique ID of the storage pool as a string.
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Fetch an XML document describing all aspects of the
     |      storage pool. This is suitable for later feeding back
     |      into the virStoragePoolCreateXML method.
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  aauuttoossttaarrtt(self)
     |      Extract the autostart flag for a storage pool
     |  
     |  bbuuiilldd(self, flags=0)
     |      Currently only filesystem pool accepts flags VIR_STORAGE_POOL_BUILD_OVERWRITE
     |      and VIR_STORAGE_POOL_BUILD_NO_OVERWRITE.
     |      
     |      Build the underlying storage pool
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ccrreeaattee(self, flags=0)
     |      Starts an inactive storage pool
     |  
     |  ccrreeaatteeXXMMLL(self, xmlDesc, flags=0)
     |      Create a storage volume within a pool based
     |      on an XML description. Not all pools support
     |      creation of volumes.
     |      
     |      Since 1.0.1 VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
     |      in flags can be used to get higher performance with
     |      qcow2 image files which don't support full preallocation,
     |      by creating a sparse image file with metadata.
     |  
     |  ccrreeaatteeXXMMLLFFrroomm(self, xmlDesc, clonevol, flags=0)
     |      Create a storage volume in the parent pool, using the
     |      'clonevol' volume as input. Information for the new
     |      volume (name, perms)  are passed via a typical volume
     |      XML description.
     |      
     |      Since 1.0.1 VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
     |      in flags can be used to get higher performance with
     |      qcow2 image files which don't support full preallocation,
     |      by creating a sparse image file with metadata.
     |  
     |  ddeelleettee(self, flags=0)
     |      Delete the underlying pool resources. This is
     |      a non-recoverable operation. The virStoragePoolPtr object
     |      itself is not free'd.
     |  
     |  ddeessttrrooyy(self)
     |      Destroy an active storage pool. This will deactivate the
     |      pool on the host, but keep any persistent config associated
     |      with it. If it has a persistent config it can later be
     |      restarted with virStoragePoolCreate(). This does not free
     |      the associated virStoragePoolPtr object.
     |  
     |  iinnffoo(self)
     |      Extract information about a storage pool. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.
     |  
     |  iissAAccttiivvee(self)
     |      Determine if the storage pool is currently running
     |  
     |  iissPPeerrssiisstteenntt(self)
     |      Determine if the storage pool has a persistent configuration
     |      which means it will still exist after shutting down
     |  
     |  lliissttAAllllVVoolluummeess(self, flags=0)
     |      List all storage volumes and returns a list of storage volume objects
     |  
     |  lliissttVVoolluummeess(self)
     |      list the storage volumes, stores the pointers to the names in @names
     |  
     |  nnaammee(self)
     |      Fetch the locally unique name of the storage pool
     |  
     |  nnuummOOffVVoolluummeess(self)
     |      Fetch the number of storage volumes within a pool
     |  
     |  rreeffrreesshh(self, flags=0)
     |      Request that the pool refresh its list of volumes. This may
     |      involve communicating with a remote server, and/or initializing
     |      new devices at the OS layer
     |  
     |  sseettAAuuttoossttaarrtt(self, autostart)
     |      Sets the autostart flag
     |  
     |  ssttoorraaggeeVVoollLLooookkuuppBByyNNaammee(self, name)
     |      Fetch a pointer to a storage volume based on its name
     |      within a pool
     |  
     |  uunnddeeffiinnee(self)
     |      Undefine an inactive storage pool
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrSSttoorraaggeeVVooll(__builtin__.object)
     |  Methods defined here:
     |  
     |  XXMMLLDDeesscc(self, flags=0)
     |      Fetch an XML document describing all aspects of
     |      the storage volume
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ddeelleettee(self, flags=0)
     |      Delete the storage volume from the pool
     |  
     |  ddoowwnnllooaadd(self, stream, offset, length, flags=0)
     |      Download the content of the volume as a stream. If @length
     |      is zero, then the remaining contents of the volume after
     |      @offset will be downloaded.
     |      
     |      This call sets up an asynchronous stream; subsequent use of
     |      stream APIs is necessary to transfer the actual data,
     |      determine how much data is successfully transferred, and
     |      detect any errors. The results will be unpredictable if
     |      another active stream is writing to the storage volume.
     |  
     |  iinnffoo(self)
     |      Extract information about a storage volume. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.
     |  
     |  kkeeyy(self)
     |      Fetch the storage volume key. This is globally
     |      unique, so the same volume will have the same
     |      key no matter what host it is accessed from
     |  
     |  nnaammee(self)
     |      Fetch the storage volume name. This is unique
     |      within the scope of a pool
     |  
     |  ppaatthh(self)
     |      Fetch the storage volume path. Depending on the pool
     |      configuration this is either persistent across hosts,
     |      or dynamically assigned at pool startup. Consult
     |      pool documentation for information on getting the
     |      persistent naming
     |  
     |  rreessiizzee(self, capacity, flags=0)
     |      Changes the capacity of the storage volume @vol to @capacity. The
     |      operation will fail if the new capacity requires allocation that would
     |      exceed the remaining free space in the parent pool.  The contents of
     |      the new capacity will appear as all zero bytes. The capacity value will
     |      be rounded to the granularity supported by the hypervisor.
     |      
     |      Normally, the operation will attempt to affect capacity with a minimum
     |      impact on allocation (that is, the default operation favors a sparse
     |      resize).  If @flags contains VIR_STORAGE_VOL_RESIZE_ALLOCATE, then the
     |      operation will ensure that allocation is sufficient for the new
     |      capacity; this may make the operation take noticeably longer.
     |      
     |      Normally, the operation treats @capacity as the new size in bytes;
     |      but if @flags contains VIR_STORAGE_VOL_RESIZE_DELTA, then @capacity
     |      represents the size difference to add to the current size.  It is
     |      up to the storage pool implementation whether unaligned requests are
     |      rounded up to the next valid boundary, or rejected.
     |      
     |      Normally, this operation should only be used to enlarge capacity;
     |      but if @flags contains VIR_STORAGE_VOL_RESIZE_SHRINK, it is possible to
     |      attempt a reduction in capacity even though it might cause data loss.
     |      If VIR_STORAGE_VOL_RESIZE_DELTA is also present, then @capacity is
     |      subtracted from the current size; without it, @capacity represents
     |      the absolute new size regardless of whether it is larger or smaller
     |      than the current size.
     |  
     |  ssttoorraaggeePPoooollLLooookkuuppBByyVVoolluummee(self)
     |      Fetch a storage pool which contains a particular volume
     |  
     |  uuppllooaadd(self, stream, offset, length, flags=0)
     |      Upload new content to the volume from a stream. This call
     |      will fail if @offset + @length exceeds the size of the
     |      volume. Otherwise, if @length is non-zero, an error
     |      will be raised if an attempt is made to upload greater
     |      than @length bytes of data.
     |      
     |      This call sets up an asynchronous stream; subsequent use of
     |      stream APIs is necessary to transfer the actual data,
     |      determine how much data is successfully transferred, and
     |      detect any errors. The results will be unpredictable if
     |      another active stream is writing to the storage volume.
     |  
     |  wwiippee(self, flags=0)
     |      Ensure data previously on a volume is not accessible to future reads
     |  
     |  wwiippeePPaatttteerrnn(self, algorithm, flags=0)
     |      Similar to virStorageVolWipe, but one can choose
     |      between different wiping algorithms.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class vviirrSSttrreeaamm(__builtin__.object)
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |      # virStream methods from virStream.py (hand coded)
     |  
     |  ____iinniitt____(self, conn, _obj=None)
     |  
     |  aabboorrtt(self)
     |      Request that the in progress data transfer be cancelled
     |      abnormally before the end of the stream has been reached.
     |      For output streams this can be used to inform the driver
     |      that the stream is being terminated early. For input
     |      streams this can be used to inform the driver that it
     |      should stop sending data.
     |  
     |  ccoonnnneecctt(self)
     |  
     |  ddoowwnnllooaadd(self, vol, offset, length, flags=0)
     |      Download the content of the volume as a stream. If @length
     |      is zero, then the remaining contents of the volume after
     |      @offset will be downloaded.
     |      
     |      This call sets up an asynchronous stream; subsequent use of
     |      stream APIs is necessary to transfer the actual data,
     |      determine how much data is successfully transferred, and
     |      detect any errors. The results will be unpredictable if
     |      another active stream is writing to the storage volume.
     |  
     |  eevveennttAAddddCCaallllbbaacckk(self, events, cb, opaque)
     |  
     |  eevveennttRReemmoovveeCCaallllbbaacckk(self)
     |      Remove an event callback from the stream
     |  
     |  eevveennttUUppddaatteeCCaallllbbaacckk(self, events)
     |      Changes the set of events to monitor for a stream. This allows
     |      for event notification to be changed without having to
     |      unregister & register the callback completely. This method
     |      is guaranteed to succeed if a callback is already registered
     |  
     |  ffiinniisshh(self)
     |      Indicate that there is no further data is to be transmitted
     |      on the stream. For output streams this should be called once
     |      all data has been written. For input streams this should be
     |      called once virStreamRecv returns end-of-file.
     |      
     |      This method is a synchronization point for all asynchronous
     |      errors, so if this returns a success code the application can
     |      be sure that all data has been successfully processed.
     |  
     |  rreeccvv(self, nbytes)
     |      Reads a series of bytes from the stream. This method may
     |      block the calling application for an arbitrary amount
     |      of time.
     |      
     |      Errors are not guaranteed to be reported synchronously
     |      with the call, but may instead be delayed until a
     |      subsequent call.
     |      
     |      On success, the received data is returned. On failure, an
     |      exception is raised. If the stream is a NONBLOCK stream and
     |      the request would block, integer -2 is returned.
     |  
     |  rreeccvvAAllll(self, handler, opaque)
     |      Receive the entire data stream, sending the data to the
     |      requested data sink. This is simply a convenient alternative
     |      to virStreamRecv, for apps that do blocking-I/o.
     |      
     |      A hypothetical handler function looks like:
     |      
     |          def handler(stream, # virStream instance
     |                      buf,    # string containing received data
     |                      opaque): # extra data passed to recvAll as opaque
     |              fd = opaque
     |              return os.write(fd, buf)
     |  
     |  ssccrreeeennsshhoott(self, domain, screen, flags=0)
     |      Take a screenshot of current domain console as a stream. The image format
     |      is hypervisor specific. Moreover, some hypervisors supports multiple
     |      displays per domain. These can be distinguished by @screen argument.
     |      
     |      This call sets up a stream; subsequent use of stream API is necessary
     |      to transfer actual data, determine how much data is successfully
     |      transferred, and detect any errors.
     |      
     |      The screen ID is the sequential number of screen. In case of multiple
     |      graphics cards, heads are enumerated before devices, e.g. having
     |      two graphics cards, both with four heads, screen ID 5 addresses
     |      the second head on the second card.
     |  
     |  sseenndd(self, data)
     |      Write a series of bytes to the stream. This method may
     |      block the calling application for an arbitrary amount
     |      of time. Once an application has finished sending data
     |      it should call virStreamFinish to wait for successful
     |      confirmation from the driver, or detect any error
     |      
     |      This method may not be used if a stream source has been
     |      registered
     |      
     |      Errors are not guaranteed to be reported synchronously
     |      with the call, but may instead be delayed until a
     |      subsequent call.
     |  
     |  sseennddAAllll(self, handler, opaque)
     |      Send the entire data stream, reading the data from the
     |      requested data source. This is simply a convenient alternative
     |      to virStreamSend, for apps that do blocking-I/o.
     |      
     |      A hypothetical handler function looks like:
     |      
     |          def handler(stream, # virStream instance
     |                      nbytes, # int amt of data to read
     |                      opaque): # extra data passed to recvAll as opaque
     |              fd = opaque
     |              return os.read(fd, nbytes)
     |  
     |  uuppllooaadd(self, vol, offset, length, flags=0)
     |      Upload new content to the volume from a stream. This call
     |      will fail if @offset + @length exceeds the size of the
     |      volume. Otherwise, if @length is non-zero, an error
     |      will be raised if an attempt is made to upload greater
     |      than @length bytes of data.
     |      
     |      This call sets up an asynchronous stream; subsequent use of
     |      stream APIs is necessary to transfer the actual data,
     |      determine how much data is successfully transferred, and
     |      detect any errors. The results will be unpredictable if
     |      another active stream is writing to the storage volume.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)

FFUUNNCCTTIIOONNSS
    ggeettCCPPUUMMooddeellNNaammeess(conn, arch, flags=0)
        get the list of supported CPU models.
        @conn: virConnect connection
        @arch: Architecture
        @flags: extra flags; not used yet, so callers should always pass 0.
    
    ggeettVVeerrssiioonn(name=None)
        If no name parameter is passed (or name is None) then the
        version of the libvirt library is returned as an integer.
        
        If a name is passed and it refers to a driver linked to the
        libvirt library, then this returns a tuple of (library version,
        driver version).
        
        If the name passed refers to a non-existent driver, then you
        will get the exception 'no support for hypervisor'.
        
        Versions numbers are integers: 1000000*major + 1000*minor + release.
    
    ooppeenn(name=None)
        This function should be called first to get a connection to the
        Hypervisor and xen store
    
    ooppeennAAuutthh(uri, auth, flags=0)
    
    ooppeennRReeaaddOOnnllyy(name=None)
        This function should be called first to get a restricted connection to the
        library functionalities. The set of APIs usable are then restricted
        on the available methods to control the domains.
        
        See virConnectOpen for notes about environment variables which can
        have an effect on opening drivers
    
    rreeggiisstteerrEErrrroorrHHaannddlleerr(f, ctx)
        Register a Python function for error reporting.
        The function is called back as f(ctx, error), with error
        being a list of information about the error being raised.
        Returns 1 in case of success.
    
    vviirrEEvveennttAAddddHHaannddllee(fd, events, cb, opaque)
        register a callback for monitoring file handle events
        
        @fd: file handle to monitor for events
        @events: bitset of events to watch from virEventHandleType constants
        @cb: callback to invoke when an event occurs
        @opaque: user data to pass to callback
        
        Example callback prototype is:
            def cb(watch,   # int id of the handle
                   fd,      # int file descriptor the event occurred on
                   events,  # int bitmap of events that have occurred
                   opaque): # opaque data passed to eventAddHandle
    
    vviirrEEvveennttAAddddTTiimmeeoouutt(timeout, cb, opaque)
        register a callback for a timer event
        
        @timeout: time between events in milliseconds
        @cb: callback to invoke when an event occurs
        @opaque: user data to pass to callback
        
        Setting timeout to -1 will disable the timer. Setting the timeout
        to zero will cause it to fire on every event loop iteration.
        
        Example callback prototype is:
            def cb(timer,   # int id of the timer
                   opaque): # opaque data passed to eventAddTimeout
    
    vviirrEEvveennttRReeggiisstteerrDDeeffaauullttIImmppll()
        Registers a default event implementation based on the
        poll() system call. This is a generic implementation
        that can be used by any client application which does
        not have a need to integrate with an external event
        loop impl.
        
        Once registered, the application has to invoke virEventRunDefaultImpl in
        a loop to process events.  Failure to do so may result in connections being
        closed unexpectedly as a result of keepalive timeout.
    
    vviirrEEvveennttRReeggiisstteerrIImmppll(addHandle, updateHandle, removeHandle, addTimeout, updateTimeout, removeTimeout)
        Registers an event implementation, to allow integration
        with an external event loop. Applications would use this
        to integrate with the libglib2 event loop, or libevent
        or the QT event loop.
        
        If an application does not need to integrate with an
        existing event loop implementation, then the
        virEventRegisterDefaultImpl method can be used to setup
        the generic libvirt implementation.
    
    vviirrEEvveennttRReemmoovveeHHaannddllee(watch)
        Unregister a callback from a file handle.
    
    vviirrEEvveennttRReemmoovveeTTiimmeeoouutt(timer)
        Unregister a callback for a timer.
    
    vviirrEEvveennttRRuunnDDeeffaauullttIImmppll()
        Run one iteration of the event loop. Applications
        will generally want to have a thread which invokes
        this method in an infinite loop
        
         static bool quit = false;
        
         while (!quit) {
           if (virEventRunDefaultImpl() < 0)
              ...print error...
         }
    
    vviirrEEvveennttUUppddaatteeHHaannddllee(watch, events)
        Change event set for a monitored file handle.
        
        Will not fail if fd exists
    
    vviirrEEvveennttUUppddaatteeTTiimmeeoouutt(timer, timeout)
        Change frequency for a timer.
        
        Setting frequency to -1 will disable the timer. Setting the frequency
        to zero will cause it to fire on every event loop iteration.
        
        Will not fail if timer exists
    
    vviirrGGeettLLaassttEErrrroorr()
        Provide a pointer to the last error caught at the library level
        
        The error object is kept in thread local storage, so separate
        threads can safely access this concurrently.
    
    vviirrGGeettLLaassttEErrrroorrMMeessssaaggee()
        Get the most recent error message
    
    vviirrIInniittiiaalliizzee()
        Initialize the library.
        
        This method is invoked automatically by any of the virConnectOpen API
        calls. Since release 1.0.0, there is no need to call this method even
        in a multithreaded application, since initialization is performed in
        a thread safe manner.
        
        The only time it would be necessary to call virInitialize is if the
        application did not invoke virConnectOpen as its first API call.
    
    vviirrRReesseettLLaassttEErrrroorr()
        Reset the last error caught at the library level.
        
        The error object is kept in thread local storage, so separate
        threads can safely access this concurrently, only resetting
        their own error object.

DDAATTAA
    VVIIRR__CCOONNNNEECCTT__BBAASSEELLIINNEE__CCPPUU__EEXXPPAANNDD__FFEEAATTUURREESS = 1
    VVIIRR__CCOONNNNEECCTT__CCLLOOSSEE__RREEAASSOONN__CCLLIIEENNTT = 3
    VVIIRR__CCOONNNNEECCTT__CCLLOOSSEE__RREEAASSOONN__EEOOFF = 1
    VVIIRR__CCOONNNNEECCTT__CCLLOOSSEE__RREEAASSOONN__EERRRROORR = 0
    VVIIRR__CCOONNNNEECCTT__CCLLOOSSEE__RREEAASSOONN__KKEEEEPPAALLIIVVEE = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__AACCTTIIVVEE = 1
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__AAUUTTOOSSTTAARRTT = 1024
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__HHAASS__SSNNAAPPSSHHOOTT = 4096
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__IINNAACCTTIIVVEE = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__MMAANNAAGGEEDDSSAAVVEE = 256
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__NNOO__AAUUTTOOSSTTAARRTT = 2048
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__NNOO__MMAANNAAGGEEDDSSAAVVEE = 512
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__NNOO__SSNNAAPPSSHHOOTT = 8192
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__OOTTHHEERR = 128
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__PPAAUUSSEEDD = 32
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__PPEERRSSIISSTTEENNTT = 4
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__RRUUNNNNIINNGG = 16
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__SSHHUUTTOOFFFF = 64
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__DDOOMMAAIINNSS__TTRRAANNSSIIEENNTT = 8
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__IINNTTEERRFFAACCEESS__AACCTTIIVVEE = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__IINNTTEERRFFAACCEESS__IINNAACCTTIIVVEE = 1
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNEETTWWOORRKKSS__AACCTTIIVVEE = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNEETTWWOORRKKSS__AAUUTTOOSSTTAARRTT = 16
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNEETTWWOORRKKSS__IINNAACCTTIIVVEE = 1
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNEETTWWOORRKKSS__NNOO__AAUUTTOOSSTTAARRTT = 32
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNEETTWWOORRKKSS__PPEERRSSIISSTTEENNTT = 4
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNEETTWWOORRKKSS__TTRRAANNSSIIEENNTT = 8
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__FFCC__HHOOSSTT = 512
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__NNEETT = 16
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__PPCCII__DDEEVV = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__SSCCSSII = 128
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__SSCCSSII__GGEENNEERRIICC = 2048
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__SSCCSSII__HHOOSSTT = 32
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__SSCCSSII__TTAARRGGEETT = 64
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__SSTTOORRAAGGEE = 256
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__SSYYSSTTEEMM = 1
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__UUSSBB__DDEEVV = 4
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__UUSSBB__IINNTTEERRFFAACCEE = 8
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__NNOODDEE__DDEEVVIICCEESS__CCAAPP__VVPPOORRTTSS = 1024
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSEECCRREETTSS__EEPPHHEEMMEERRAALL = 1
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSEECCRREETTSS__NNOO__EEPPHHEEMMEERRAALL = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSEECCRREETTSS__NNOO__PPRRIIVVAATTEE = 8
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSEECCRREETTSS__PPRRIIVVAATTEE = 4
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__AACCTTIIVVEE = 2
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__AAUUTTOOSSTTAARRTT = 16
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__DDIIRR = 64
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__DDIISSKK = 1024
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__FFSS = 128
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__IINNAACCTTIIVVEE = 1
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__IISSCCSSII = 2048
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__LLOOGGIICCAALL = 512
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__MMPPAATTHH = 8192
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__NNEETTFFSS = 256
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__NNOO__AAUUTTOOSSTTAARRTT = 32
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__PPEERRSSIISSTTEENNTT = 4
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__RRBBDD = 16384
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__SSCCSSII = 4096
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__SSHHEEEEPPDDOOGG = 32768
    VVIIRR__CCOONNNNEECCTT__LLIISSTT__SSTTOORRAAGGEE__PPOOOOLLSS__TTRRAANNSSIIEENNTT = 8
    VVIIRR__CCOONNNNEECCTT__NNOO__AALLIIAASSEESS = 2
    VVIIRR__CCOONNNNEECCTT__RROO = 1
    VVIIRR__CCPPUU__CCOOMMPPAARREE__EERRRROORR = -1
    VVIIRR__CCPPUU__CCOOMMPPAARREE__IIDDEENNTTIICCAALL = 1
    VVIIRR__CCPPUU__CCOOMMPPAARREE__IINNCCOOMMPPAATTIIBBLLEE = 0
    VVIIRR__CCPPUU__CCOOMMPPAARREE__SSUUPPEERRSSEETT = 2
    VVIIRR__CCRREEDD__AAUUTTHHNNAAMMEE = 2
    VVIIRR__CCRREEDD__CCNNOONNCCEE = 4
    VVIIRR__CCRREEDD__EECCHHOOPPRROOMMPPTT = 6
    VVIIRR__CCRREEDD__EEXXTTEERRNNAALL = 9
    VVIIRR__CCRREEDD__LLAANNGGUUAAGGEE = 3
    VVIIRR__CCRREEDD__NNOOEECCHHOOPPRROOMMPPTT = 7
    VVIIRR__CCRREEDD__PPAASSSSPPHHRRAASSEE = 5
    VVIIRR__CCRREEDD__RREEAALLMM = 8
    VVIIRR__CCRREEDD__UUSSEERRNNAAMMEE = 1
    VVIIRR__DDOOMMAAIINN__AAFFFFEECCTT__CCOONNFFIIGG = 2
    VVIIRR__DDOOMMAAIINN__AAFFFFEECCTT__CCUURRRREENNTT = 0
    VVIIRR__DDOOMMAAIINN__AAFFFFEECCTT__LLIIVVEE = 1
    VVIIRR__DDOOMMAAIINN__BBLLKKIIOO__PPAARRAAMM__BBOOOOLLEEAANN = 6
    VVIIRR__DDOOMMAAIINN__BBLLKKIIOO__PPAARRAAMM__DDOOUUBBLLEE = 5
    VVIIRR__DDOOMMAAIINN__BBLLKKIIOO__PPAARRAAMM__IINNTT = 1
    VVIIRR__DDOOMMAAIINN__BBLLKKIIOO__PPAARRAAMM__LLLLOONNGG = 3
    VVIIRR__DDOOMMAAIINN__BBLLKKIIOO__PPAARRAAMM__UUIINNTT = 2
    VVIIRR__DDOOMMAAIINN__BBLLKKIIOO__PPAARRAAMM__UULLLLOONNGG = 4
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKKEEDD = 2
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKKEEDD__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__CCOOMMMMIITT__DDEELLEETTEE = 2
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__CCOOMMMMIITT__SSHHAALLLLOOWW = 1
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__AABBOORRTT__AASSYYNNCC = 1
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__AABBOORRTT__PPIIVVOOTT = 2
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__CCAANNCCEELLEEDD = 2
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__CCOOMMPPLLEETTEEDD = 0
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__FFAAIILLEEDD = 1
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__RREEAADDYY = 3
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__TTYYPPEE__CCOOMMMMIITT = 3
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__TTYYPPEE__CCOOPPYY = 2
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__TTYYPPEE__PPUULLLL = 1
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__JJOOBB__TTYYPPEE__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__RREEBBAASSEE__CCOOPPYY = 8
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__RREEBBAASSEE__CCOOPPYY__RRAAWW = 4
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__RREEBBAASSEE__RREEUUSSEE__EEXXTT = 2
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__RREEBBAASSEE__SSHHAALLLLOOWW = 1
    VVIIRR__DDOOMMAAIINN__BBLLOOCCKK__RREESSIIZZEE__BBYYTTEESS = 1
    VVIIRR__DDOOMMAAIINN__CCHHAANNNNEELL__FFOORRCCEE = 1
    VVIIRR__DDOOMMAAIINN__CCOONNSSOOLLEE__FFOORRCCEE = 1
    VVIIRR__DDOOMMAAIINN__CCOONNSSOOLLEE__SSAAFFEE = 2
    VVIIRR__DDOOMMAAIINN__CCOONNTTRROOLL__EERRRROORR = 3
    VVIIRR__DDOOMMAAIINN__CCOONNTTRROOLL__JJOOBB = 1
    VVIIRR__DDOOMMAAIINN__CCOONNTTRROOLL__OOCCCCUUPPIIEEDD = 2
    VVIIRR__DDOOMMAAIINN__CCOONNTTRROOLL__OOKK = 0
    VVIIRR__DDOOMMAAIINN__CCRRAASSHHEEDD = 6
    VVIIRR__DDOOMMAAIINN__CCRRAASSHHEEDD__PPAANNIICCKKEEDD = 1
    VVIIRR__DDOOMMAAIINN__CCRRAASSHHEEDD__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__DDEESSTTRROOYY__DDEEFFAAUULLTT = 0
    VVIIRR__DDOOMMAAIINN__DDEESSTTRROOYY__GGRRAACCEEFFUULL = 1
    VVIIRR__DDOOMMAAIINN__DDEEVVIICCEE__MMOODDIIFFYY__CCOONNFFIIGG = 2
    VVIIRR__DDOOMMAAIINN__DDEEVVIICCEE__MMOODDIIFFYY__CCUURRRREENNTT = 0
    VVIIRR__DDOOMMAAIINN__DDEEVVIICCEE__MMOODDIIFFYY__FFOORRCCEE = 4
    VVIIRR__DDOOMMAAIINN__DDEEVVIICCEE__MMOODDIIFFYY__LLIIVVEE = 1
    VVIIRR__DDOOMMAAIINN__DDIISSKK__EERRRROORR__NNOONNEE = 0
    VVIIRR__DDOOMMAAIINN__DDIISSKK__EERRRROORR__NNOO__SSPPAACCEE = 2
    VVIIRR__DDOOMMAAIINN__DDIISSKK__EERRRROORR__UUNNSSPPEECC = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__CCRRAASSHHEEDD = 8
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__CCRRAASSHHEEDD__PPAANNIICCKKEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__DDEEFFIINNEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__DDEEFFIINNEEDD__AADDDDEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__DDEEFFIINNEEDD__UUPPDDAATTEEDD = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__DDIISSKK__CCHHAANNGGEE__MMIISSSSIINNGG__OONN__SSTTAARRTT = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__DDIISSKK__DDRROOPP__MMIISSSSIINNGG__OONN__SSTTAARRTT = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__GGRRAAPPHHIICCSS__AADDDDRREESSSS__IIPPVV44 = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__GGRRAAPPHHIICCSS__AADDDDRREESSSS__IIPPVV66 = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__GGRRAAPPHHIICCSS__AADDDDRREESSSS__UUNNIIXX = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__GGRRAAPPHHIICCSS__CCOONNNNEECCTT = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__GGRRAAPPHHIICCSS__DDIISSCCOONNNNEECCTT = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__GGRRAAPPHHIICCSS__IINNIITTIIAALLIIZZEE = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__BBAALLLLOOOONN__CCHHAANNGGEE = 13
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__BBLLOOCCKK__JJOOBB = 8
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__CCOONNTTRROOLL__EERRRROORR = 7
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__DDEEVVIICCEE__RREEMMOOVVEEDD = 15
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__DDIISSKK__CCHHAANNGGEE = 9
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__GGRRAAPPHHIICCSS = 5
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__IIOO__EERRRROORR = 4
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__IIOO__EERRRROORR__RREEAASSOONN = 6
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__LLIIFFEECCYYCCLLEE = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__PPMMSSUUSSPPEENNDD = 12
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__PPMMSSUUSSPPEENNDD__DDIISSKK = 14
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__PPMMWWAAKKEEUUPP = 11
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__RREEBBOOOOTT = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__RRTTCC__CCHHAANNGGEE = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__TTRRAAYY__CCHHAANNGGEE = 10
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIDD__WWAATTCCHHDDOOGG = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIOO__EERRRROORR__NNOONNEE = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIOO__EERRRROORR__PPAAUUSSEE = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__IIOO__EERRRROORR__RREEPPOORRTT = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__PPMMSSUUSSPPEENNDDEEDD = 7
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__PPMMSSUUSSPPEENNDDEEDD__DDIISSKK = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__PPMMSSUUSSPPEENNDDEEDD__MMEEMMOORRYY = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__RREESSUUMMEEDD = 4
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__RREESSUUMMEEDD__FFRROOMM__SSNNAAPPSSHHOOTT = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__RREESSUUMMEEDD__MMIIGGRRAATTEEDD = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__RREESSUUMMEEDD__UUNNPPAAUUSSEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSHHUUTTDDOOWWNN = 6
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSHHUUTTDDOOWWNN__FFIINNIISSHHEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTAARRTTEEDD = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTAARRTTEEDD__BBOOOOTTEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTAARRTTEEDD__FFRROOMM__SSNNAAPPSSHHOOTT = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTAARRTTEEDD__MMIIGGRRAATTEEDD = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTAARRTTEEDD__RREESSTTOORREEDD = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTAARRTTEEDD__WWAAKKEEUUPP = 4
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD = 5
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__CCRRAASSHHEEDD = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__DDEESSTTRROOYYEEDD = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__FFAAIILLEEDD = 5
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__FFRROOMM__SSNNAAPPSSHHOOTT = 6
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__MMIIGGRRAATTEEDD = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__SSAAVVEEDD = 4
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSTTOOPPPPEEDD__SSHHUUTTDDOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__AAPPII__EERRRROORR = 6
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__FFRROOMM__SSNNAAPPSSHHOOTT = 5
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__IIOOEERRRROORR = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__MMIIGGRRAATTEEDD = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__PPAAUUSSEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__RREESSTTOORREEDD = 4
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__SSUUSSPPEENNDDEEDD__WWAATTCCHHDDOOGG = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__TTRRAAYY__CCHHAANNGGEE__CCLLOOSSEE = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__TTRRAAYY__CCHHAANNGGEE__OOPPEENN = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__UUNNDDEEFFIINNEEDD = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__UUNNDDEEFFIINNEEDD__RREEMMOOVVEEDD = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__WWAATTCCHHDDOOGG__DDEEBBUUGG = 5
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__WWAATTCCHHDDOOGG__NNOONNEE = 0
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__WWAATTCCHHDDOOGG__PPAAUUSSEE = 1
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__WWAATTCCHHDDOOGG__PPOOWWEERROOFFFF = 3
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__WWAATTCCHHDDOOGG__RREESSEETT = 2
    VVIIRR__DDOOMMAAIINN__EEVVEENNTT__WWAATTCCHHDDOOGG__SSHHUUTTDDOOWWNN = 4
    VVIIRR__DDOOMMAAIINN__JJOOBB__BBOOUUNNDDEEDD = 1
    VVIIRR__DDOOMMAAIINN__JJOOBB__CCAANNCCEELLLLEEDD = 5
    VVIIRR__DDOOMMAAIINN__JJOOBB__CCOOMMPPLLEETTEEDD = 3
    VVIIRR__DDOOMMAAIINN__JJOOBB__FFAAIILLEEDD = 4
    VVIIRR__DDOOMMAAIINN__JJOOBB__NNOONNEE = 0
    VVIIRR__DDOOMMAAIINN__JJOOBB__UUNNBBOOUUNNDDEEDD = 2
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__PPAARRAAMM__BBOOOOLLEEAANN = 6
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__PPAARRAAMM__DDOOUUBBLLEE = 5
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__PPAARRAAMM__IINNTT = 1
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__PPAARRAAMM__LLLLOONNGG = 3
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__PPAARRAAMM__UUIINNTT = 2
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__PPAARRAAMM__UULLLLOONNGG = 4
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__AACCTTUUAALL__BBAALLLLOOOONN = 6
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__AAVVAAIILLAABBLLEE = 5
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__MMAAJJOORR__FFAAUULLTT = 2
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__MMIINNOORR__FFAAUULLTT = 3
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__NNRR = 8
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__RRSSSS = 7
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__SSWWAAPP__IINN = 0
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__SSWWAAPP__OOUUTT = 1
    VVIIRR__DDOOMMAAIINN__MMEEMMOORRYY__SSTTAATT__UUNNUUSSEEDD = 4
    VVIIRR__DDOOMMAAIINN__MMEEMM__CCOONNFFIIGG = 2
    VVIIRR__DDOOMMAAIINN__MMEEMM__CCUURRRREENNTT = 0
    VVIIRR__DDOOMMAAIINN__MMEEMM__LLIIVVEE = 1
    VVIIRR__DDOOMMAAIINN__MMEEMM__MMAAXXIIMMUUMM = 4
    VVIIRR__DDOOMMAAIINN__MMEETTAADDAATTAA__DDEESSCCRRIIPPTTIIOONN = 0
    VVIIRR__DDOOMMAAIINN__MMEETTAADDAATTAA__EELLEEMMEENNTT = 2
    VVIIRR__DDOOMMAAIINN__MMEETTAADDAATTAA__TTIITTLLEE = 1
    VVIIRR__DDOOMMAAIINN__NNOONNEE = 0
    VVIIRR__DDOOMMAAIINN__NNOOSSTTAATTEE = 0
    VVIIRR__DDOOMMAAIINN__NNOOSSTTAATTEE__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__NNUUMMAATTUUNNEE__MMEEMM__IINNTTEERRLLEEAAVVEE = 2
    VVIIRR__DDOOMMAAIINN__NNUUMMAATTUUNNEE__MMEEMM__PPRREEFFEERRRREEDD = 1
    VVIIRR__DDOOMMAAIINN__NNUUMMAATTUUNNEE__MMEEMM__SSTTRRIICCTT = 0
    VVIIRR__DDOOMMAAIINN__OOPPEENN__GGRRAAPPHHIICCSS__SSKKIIPPAAUUTTHH = 1
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD = 3
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__CCRRAASSHHEEDD = 10
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__DDUUMMPP = 4
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__FFRROOMM__SSNNAAPPSSHHOOTT = 7
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__IIOOEERRRROORR = 5
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__MMIIGGRRAATTIIOONN = 2
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__SSAAVVEE = 3
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__SSHHUUTTTTIINNGG__DDOOWWNN = 8
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__SSNNAAPPSSHHOOTT = 9
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__UUSSEERR = 1
    VVIIRR__DDOOMMAAIINN__PPAAUUSSEEDD__WWAATTCCHHDDOOGG = 6
    VVIIRR__DDOOMMAAIINN__PPMMSSUUSSPPEENNDDEEDD = 7
    VVIIRR__DDOOMMAAIINN__PPMMSSUUSSPPEENNDDEEDD__DDIISSKK__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__PPMMSSUUSSPPEENNDDEEDD__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__AABBRRTT = 6
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__AALLRRMM = 14
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__BBUUSS = 7
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__CCHHLLDD = 17
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__CCOONNTT = 18
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__FFPPEE = 8
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__HHUUPP = 1
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__IILLLL = 4
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__IINNTT = 2
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__KKIILLLL = 9
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__NNOOPP = 0
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__PPIIPPEE = 13
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__PPOOLLLL = 29
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__PPRROOFF = 27
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__PPWWRR = 30
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__QQUUIITT = 3
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT00 = 32
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT11 = 33
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1100 = 42
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1111 = 43
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1122 = 44
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1133 = 45
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1144 = 46
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1155 = 47
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1166 = 48
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1177 = 49
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1188 = 50
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT1199 = 51
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT22 = 34
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2200 = 52
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2211 = 53
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2222 = 54
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2233 = 55
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2244 = 56
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2255 = 57
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2266 = 58
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2277 = 59
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2288 = 60
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT2299 = 61
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT33 = 35
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT3300 = 62
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT3311 = 63
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT3322 = 64
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT44 = 36
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT55 = 37
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT66 = 38
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT77 = 39
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT88 = 40
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__RRTT99 = 41
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__SSEEGGVV = 11
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__SSTTKKFFLLTT = 16
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__SSTTOOPP = 19
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__SSYYSS = 31
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__TTEERRMM = 15
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__TTRRAAPP = 5
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__TTSSTTPP = 20
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__TTTTIINN = 21
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__TTTTOOUU = 22
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__UURRGG = 23
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__UUSSRR11 = 10
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__UUSSRR22 = 12
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__VVTTAALLRRMM = 26
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__WWIINNCCHH = 28
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__XXCCPPUU = 24
    VVIIRR__DDOOMMAAIINN__PPRROOCCEESSSS__SSIIGGNNAALL__XXFFSSZZ = 25
    VVIIRR__DDOOMMAAIINN__RREEBBOOOOTT__AACCPPII__PPOOWWEERR__BBTTNN = 1
    VVIIRR__DDOOMMAAIINN__RREEBBOOOOTT__DDEEFFAAUULLTT = 0
    VVIIRR__DDOOMMAAIINN__RREEBBOOOOTT__GGUUEESSTT__AAGGEENNTT = 2
    VVIIRR__DDOOMMAAIINN__RREEBBOOOOTT__IINNIITTCCTTLL = 4
    VVIIRR__DDOOMMAAIINN__RREEBBOOOOTT__SSIIGGNNAALL = 8
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG = 1
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__BBOOOOTTEEDD = 1
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__CCRRAASSHHEEDD = 9
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__FFRROOMM__SSNNAAPPSSHHOOTT = 4
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__MMIIGGRRAATTEEDD = 2
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__MMIIGGRRAATTIIOONN__CCAANNCCEELLEEDD = 6
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__RREESSTTOORREEDD = 3
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__SSAAVVEE__CCAANNCCEELLEEDD = 7
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__UUNNPPAAUUSSEEDD = 5
    VVIIRR__DDOOMMAAIINN__RRUUNNNNIINNGG__WWAAKKEEUUPP = 8
    VVIIRR__DDOOMMAAIINN__SSAAVVEE__BBYYPPAASSSS__CCAACCHHEE = 1
    VVIIRR__DDOOMMAAIINN__SSAAVVEE__PPAAUUSSEEDD = 4
    VVIIRR__DDOOMMAAIINN__SSAAVVEE__RRUUNNNNIINNGG = 2
    VVIIRR__DDOOMMAAIINN__SSCCHHEEDD__FFIIEELLDD__BBOOOOLLEEAANN = 6
    VVIIRR__DDOOMMAAIINN__SSCCHHEEDD__FFIIEELLDD__DDOOUUBBLLEE = 5
    VVIIRR__DDOOMMAAIINN__SSCCHHEEDD__FFIIEELLDD__IINNTT = 1
    VVIIRR__DDOOMMAAIINN__SSCCHHEEDD__FFIIEELLDD__LLLLOONNGG = 3
    VVIIRR__DDOOMMAAIINN__SSCCHHEEDD__FFIIEELLDD__UUIINNTT = 2
    VVIIRR__DDOOMMAAIINN__SSCCHHEEDD__FFIIEELLDD__UULLLLOONNGG = 4
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN = 4
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__AACCPPII__PPOOWWEERR__BBTTNN = 1
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__DDEEFFAAUULLTT = 0
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__GGUUEESSTT__AAGGEENNTT = 2
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__IINNIITTCCTTLL = 4
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__SSIIGGNNAALL = 8
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__SSHHUUTTDDOOWWNN__UUSSEERR = 1
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF = 5
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__CCRRAASSHHEEDD = 3
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__DDEESSTTRROOYYEEDD = 2
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__FFAAIILLEEDD = 6
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__FFRROOMM__SSNNAAPPSSHHOOTT = 7
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__MMIIGGRRAATTEEDD = 4
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__SSAAVVEEDD = 5
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__SSHHUUTTDDOOWWNN = 1
    VVIIRR__DDOOMMAAIINN__SSHHUUTTOOFFFF__UUNNKKNNOOWWNN = 0
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__AATTOOMMIICC = 128
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__CCUURRRREENNTT = 2
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__DDIISSKK__OONNLLYY = 16
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__HHAALLTT = 8
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__LLIIVVEE = 256
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__NNOO__MMEETTAADDAATTAA = 4
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__QQUUIIEESSCCEE = 64
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__RREEDDEEFFIINNEE = 1
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__CCRREEAATTEE__RREEUUSSEE__EEXXTT = 32
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__DDEELLEETTEE__CCHHIILLDDRREENN = 1
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__DDEELLEETTEE__CCHHIILLDDRREENN__OONNLLYY = 4
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__DDEELLEETTEE__MMEETTAADDAATTAA__OONNLLYY = 2
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__AACCTTIIVVEE = 64
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__DDEESSCCEENNDDAANNTTSS = 1
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__DDIISSKK__OONNLLYY = 128
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__EEXXTTEERRNNAALL = 512
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__IINNAACCTTIIVVEE = 32
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__IINNTTEERRNNAALL = 256
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__LLEEAAVVEESS = 4
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__MMEETTAADDAATTAA = 2
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__NNOO__LLEEAAVVEESS = 8
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__NNOO__MMEETTAADDAATTAA = 16
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__LLIISSTT__RROOOOTTSS = 1
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__RREEVVEERRTT__FFOORRCCEE = 4
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__RREEVVEERRTT__PPAAUUSSEEDD = 2
    VVIIRR__DDOOMMAAIINN__SSNNAAPPSSHHOOTT__RREEVVEERRTT__RRUUNNNNIINNGG = 1
    VVIIRR__DDOOMMAAIINN__SSTTAARRTT__AAUUTTOODDEESSTTRROOYY = 2
    VVIIRR__DDOOMMAAIINN__SSTTAARRTT__BBYYPPAASSSS__CCAACCHHEE = 4
    VVIIRR__DDOOMMAAIINN__SSTTAARRTT__FFOORRCCEE__BBOOOOTT = 8
    VVIIRR__DDOOMMAAIINN__SSTTAARRTT__PPAAUUSSEEDD = 1
    VVIIRR__DDOOMMAAIINN__UUNNDDEEFFIINNEE__MMAANNAAGGEEDD__SSAAVVEE = 1
    VVIIRR__DDOOMMAAIINN__UUNNDDEEFFIINNEE__SSNNAAPPSSHHOOTTSS__MMEETTAADDAATTAA = 2
    VVIIRR__DDOOMMAAIINN__VVCCPPUU__CCOONNFFIIGG = 2
    VVIIRR__DDOOMMAAIINN__VVCCPPUU__CCUURRRREENNTT = 0
    VVIIRR__DDOOMMAAIINN__VVCCPPUU__GGUUEESSTT = 8
    VVIIRR__DDOOMMAAIINN__VVCCPPUU__LLIIVVEE = 1
    VVIIRR__DDOOMMAAIINN__VVCCPPUU__MMAAXXIIMMUUMM = 4
    VVIIRR__DDOOMMAAIINN__XXMMLL__IINNAACCTTIIVVEE = 2
    VVIIRR__DDOOMMAAIINN__XXMMLL__MMIIGGRRAATTAABBLLEE = 8
    VVIIRR__DDOOMMAAIINN__XXMMLL__SSEECCUURREE = 1
    VVIIRR__DDOOMMAAIINN__XXMMLL__UUPPDDAATTEE__CCPPUU = 4
    VVIIRR__DDUUMMPP__BBYYPPAASSSS__CCAACCHHEE = 4
    VVIIRR__DDUUMMPP__CCRRAASSHH = 1
    VVIIRR__DDUUMMPP__LLIIVVEE = 2
    VVIIRR__DDUUMMPP__MMEEMMOORRYY__OONNLLYY = 16
    VVIIRR__DDUUMMPP__RREESSEETT = 8
    VVIIRR__EERRRR__AACCCCEESSSS__DDEENNIIEEDD = 88
    VVIIRR__EERRRR__AAGGEENNTT__UUNNRREESSPPOONNSSIIVVEE = 86
    VVIIRR__EERRRR__AARRGGUUMMEENNTT__UUNNSSUUPPPPOORRTTEEDD = 74
    VVIIRR__EERRRR__AAUUTTHH__CCAANNCCEELLLLEEDD = 79
    VVIIRR__EERRRR__AAUUTTHH__FFAAIILLEEDD = 45
    VVIIRR__EERRRR__BBLLOOCCKK__CCOOPPYY__AACCTTIIVVEE = 83
    VVIIRR__EERRRR__BBUUIILLDD__FFIIRREEWWAALLLL = 63
    VVIIRR__EERRRR__CCAALLLL__FFAAIILLEEDD = 26
    VVIIRR__EERRRR__CCOONNFFIIGG__UUNNSSUUPPPPOORRTTEEDD = 67
    VVIIRR__EERRRR__CCOONNFF__SSYYNNTTAAXX = 33
    VVIIRR__EERRRR__DDBBUUSS__SSEERRVVIICCEE = 89
    VVIIRR__EERRRR__DDOOMM__EEXXIISSTT = 28
    VVIIRR__EERRRR__DDRRIIVVEERR__FFUULLLL = 25
    VVIIRR__EERRRR__EERRRROORR = 2
    VVIIRR__EERRRR__GGEETT__FFAAIILLEEDD = 10
    VVIIRR__EERRRR__GGNNUUTTLLSS__EERRRROORR = 40
    VVIIRR__EERRRR__HHOOOOKK__SSCCRRIIPPTT__FFAAIILLEEDD = 70
    VVIIRR__EERRRR__HHTTTTPP__EERRRROORR = 12
    VVIIRR__EERRRR__IINNTTEERRNNAALL__EERRRROORR = 1
    VVIIRR__EERRRR__IINNVVAALLIIDD__AARRGG = 8
    VVIIRR__EERRRR__IINNVVAALLIIDD__CCOONNNN = 6
    VVIIRR__EERRRR__IINNVVAALLIIDD__DDOOMMAAIINN = 7
    VVIIRR__EERRRR__IINNVVAALLIIDD__DDOOMMAAIINN__SSNNAAPPSSHHOOTT = 71
    VVIIRR__EERRRR__IINNVVAALLIIDD__IINNTTEERRFFAACCEE = 58
    VVIIRR__EERRRR__IINNVVAALLIIDD__MMAACC = 44
    VVIIRR__EERRRR__IINNVVAALLIIDD__NNEETTWWOORRKK = 36
    VVIIRR__EERRRR__IINNVVAALLIIDD__NNOODDEE__DDEEVVIICCEE = 52
    VVIIRR__EERRRR__IINNVVAALLIIDD__NNWWFFIILLTTEERR = 61
    VVIIRR__EERRRR__IINNVVAALLIIDD__SSEECCRREETT = 65
    VVIIRR__EERRRR__IINNVVAALLIIDD__SSTTOORRAAGGEE__PPOOOOLL = 46
    VVIIRR__EERRRR__IINNVVAALLIIDD__SSTTOORRAAGGEE__VVOOLL = 47
    VVIIRR__EERRRR__IINNVVAALLIIDD__SSTTRREEAAMM = 73
    VVIIRR__EERRRR__MMIIGGRRAATTEE__PPEERRSSIISSTT__FFAAIILLEEDD = 69
    VVIIRR__EERRRR__MMIIGGRRAATTEE__UUNNSSAAFFEE = 81
    VVIIRR__EERRRR__MMUULLTTIIPPLLEE__IINNTTEERRFFAACCEESS = 59
    VVIIRR__EERRRR__NNEETTWWOORRKK__EEXXIISSTT = 37
    VVIIRR__EERRRR__NNOONNEE = 0
    VVIIRR__EERRRR__NNOO__CCOONNNNEECCTT = 5
    VVIIRR__EERRRR__NNOO__DDEEVVIICCEE = 23
    VVIIRR__EERRRR__NNOO__DDOOMMAAIINN = 42
    VVIIRR__EERRRR__NNOO__DDOOMMAAIINN__MMEETTAADDAATTAA = 80
    VVIIRR__EERRRR__NNOO__DDOOMMAAIINN__SSNNAAPPSSHHOOTT = 72
    VVIIRR__EERRRR__NNOO__IINNTTEERRFFAACCEE = 57
    VVIIRR__EERRRR__NNOO__KKEERRNNEELL = 17
    VVIIRR__EERRRR__NNOO__MMEEMMOORRYY = 2
    VVIIRR__EERRRR__NNOO__NNAAMMEE = 21
    VVIIRR__EERRRR__NNOO__NNEETTWWOORRKK = 43
    VVIIRR__EERRRR__NNOO__NNOODDEE__DDEEVVIICCEE = 53
    VVIIRR__EERRRR__NNOO__NNWWFFIILLTTEERR = 62
    VVIIRR__EERRRR__NNOO__OOSS = 22
    VVIIRR__EERRRR__NNOO__RROOOOTT = 18
    VVIIRR__EERRRR__NNOO__SSEECCRREETT = 66
    VVIIRR__EERRRR__NNOO__SSEECCUURRIITTYY__MMOODDEELL = 54
    VVIIRR__EERRRR__NNOO__SSOOUURRCCEE = 19
    VVIIRR__EERRRR__NNOO__SSTTOORRAAGGEE__PPOOOOLL = 49
    VVIIRR__EERRRR__NNOO__SSTTOORRAAGGEE__VVOOLL = 50
    VVIIRR__EERRRR__NNOO__SSUUPPPPOORRTT = 3
    VVIIRR__EERRRR__NNOO__TTAARRGGEETT = 20
    VVIIRR__EERRRR__NNOO__XXEENN = 14
    VVIIRR__EERRRR__NNOO__XXEENNSSTTOORREE = 24
    VVIIRR__EERRRR__OOKK = 0
    VVIIRR__EERRRR__OOPPEENN__FFAAIILLEEDD = 30
    VVIIRR__EERRRR__OOPPEERRAATTIIOONN__AABBOORRTTEEDD = 78
    VVIIRR__EERRRR__OOPPEERRAATTIIOONN__DDEENNIIEEDD = 29
    VVIIRR__EERRRR__OOPPEERRAATTIIOONN__FFAAIILLEEDD = 9
    VVIIRR__EERRRR__OOPPEERRAATTIIOONN__IINNVVAALLIIDD = 55
    VVIIRR__EERRRR__OOPPEERRAATTIIOONN__TTIIMMEEOOUUTT = 68
    VVIIRR__EERRRR__OOPPEERRAATTIIOONN__UUNNSSUUPPPPOORRTTEEDD = 84
    VVIIRR__EERRRR__OOSS__TTYYPPEE = 16
    VVIIRR__EERRRR__OOVVEERRFFLLOOWW = 82
    VVIIRR__EERRRR__PPAARRSSEE__FFAAIILLEEDD = 32
    VVIIRR__EERRRR__PPOOSSTT__FFAAIILLEEDD = 11
    VVIIRR__EERRRR__RREEAADD__FFAAIILLEEDD = 31
    VVIIRR__EERRRR__RREESSOOUURRCCEE__BBUUSSYY = 87
    VVIIRR__EERRRR__RRPPCC = 39
    VVIIRR__EERRRR__SSEEXXPPRR__SSEERRIIAALL = 13
    VVIIRR__EERRRR__SSNNAAPPSSHHOOTT__RREEVVEERRTT__RRIISSKKYY = 77
    VVIIRR__EERRRR__SSSSHH = 85
    VVIIRR__EERRRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLTT = 76
    VVIIRR__EERRRR__SSTTOORRAAGGEE__PPRROOBBEE__FFAAIILLEEDD = 75
    VVIIRR__EERRRR__SSYYSSTTEEMM__EERRRROORR = 38
    VVIIRR__EERRRR__UUNNKKNNOOWWNN__HHOOSSTT = 4
    VVIIRR__EERRRR__WWAARRNNIINNGG = 1
    VVIIRR__EERRRR__WWRRIITTEE__FFAAIILLEEDD = 34
    VVIIRR__EERRRR__XXEENN__CCAALLLL = 15
    VVIIRR__EERRRR__XXMMLL__DDEETTAAIILL = 35
    VVIIRR__EERRRR__XXMMLL__EERRRROORR = 27
    VVIIRR__EEVVEENNTT__HHAANNDDLLEE__EERRRROORR = 4
    VVIIRR__EEVVEENNTT__HHAANNDDLLEE__HHAANNGGUUPP = 8
    VVIIRR__EEVVEENNTT__HHAANNDDLLEE__RREEAADDAABBLLEE = 1
    VVIIRR__EEVVEENNTT__HHAANNDDLLEE__WWRRIITTAABBLLEE = 2
    VVIIRR__FFRROOMM__AACCCCEESSSS = 55
    VVIIRR__FFRROOMM__AAUUDDIITT = 36
    VVIIRR__FFRROOMM__AAUUTTHH = 46
    VVIIRR__FFRROOMM__CCAAPPAABBIILLIITTIIEESS = 44
    VVIIRR__FFRROOMM__CCGGRROOUUPP = 54
    VVIIRR__FFRROOMM__CCOONNFF = 9
    VVIIRR__FFRROOMM__CCPPUU = 31
    VVIIRR__FFRROOMM__DDBBUUSS = 47
    VVIIRR__FFRROOMM__DDEEVVIICCEE = 49
    VVIIRR__FFRROOMM__DDOOMM = 6
    VVIIRR__FFRROOMM__DDOOMMAAIINN = 20
    VVIIRR__FFRROOMM__DDOOMMAAIINN__SSNNAAPPSSHHOOTT = 35
    VVIIRR__FFRROOMM__EESSXX = 28
    VVIIRR__FFRROOMM__EEVVEENNTT = 40
    VVIIRR__FFRROOMM__HHOOOOKK = 34
    VVIIRR__FFRROOMM__HHYYPPEERRVV = 43
    VVIIRR__FFRROOMM__IIDDEENNTTIITTYY = 53
    VVIIRR__FFRROOMM__IINNIITTCCTTLL = 52
    VVIIRR__FFRROOMM__IINNTTEERRFFAACCEE = 26
    VVIIRR__FFRROOMM__LLIIBBXXLL = 41
    VVIIRR__FFRROOMM__LLOOCCKKIINNGG = 42
    VVIIRR__FFRROOMM__LLOOCCKKSSPPAACCEE = 51
    VVIIRR__FFRROOMM__LLXXCC = 17
    VVIIRR__FFRROOMM__NNEETT = 11
    VVIIRR__FFRROOMM__NNEETTWWOORRKK = 19
    VVIIRR__FFRROOMM__NNOODDEEDDEEVV = 22
    VVIIRR__FFRROOMM__NNOONNEE = 0
    VVIIRR__FFRROOMM__NNWWFFIILLTTEERR = 33
    VVIIRR__FFRROOMM__OONNEE = 27
    VVIIRR__FFRROOMM__OOPPEENNVVZZ = 14
    VVIIRR__FFRROOMM__PPAARRAALLLLEELLSS = 48
    VVIIRR__FFRROOMM__PPHHYYPP = 29
    VVIIRR__FFRROOMM__PPRROOXXYY = 8
    VVIIRR__FFRROOMM__QQEEMMUU = 10
    VVIIRR__FFRROOMM__RREEMMOOTTEE = 13
    VVIIRR__FFRROOMM__RRPPCC = 7
    VVIIRR__FFRROOMM__SSEECCRREETT = 30
    VVIIRR__FFRROOMM__SSEECCUURRIITTYY = 24
    VVIIRR__FFRROOMM__SSEEXXPPRR = 4
    VVIIRR__FFRROOMM__SSSSHH = 50
    VVIIRR__FFRROOMM__SSTTAATTSS__LLIINNUUXX = 16
    VVIIRR__FFRROOMM__SSTTOORRAAGGEE = 18
    VVIIRR__FFRROOMM__SSTTRREEAAMMSS = 38
    VVIIRR__FFRROOMM__SSYYSSIINNFFOO = 37
    VVIIRR__FFRROOMM__SSYYSSTTEEMMDD = 56
    VVIIRR__FFRROOMM__TTEESSTT = 12
    VVIIRR__FFRROOMM__UUMMLL = 21
    VVIIRR__FFRROOMM__UURRII = 45
    VVIIRR__FFRROOMM__VVBBOOXX = 25
    VVIIRR__FFRROOMM__VVMMWWAARREE = 39
    VVIIRR__FFRROOMM__XXEENN = 1
    VVIIRR__FFRROOMM__XXEENNAAPPII = 32
    VVIIRR__FFRROOMM__XXEENNDD = 2
    VVIIRR__FFRROOMM__XXEENNSSTTOORREE = 3
    VVIIRR__FFRROOMM__XXEENNXXMM = 15
    VVIIRR__FFRROOMM__XXEENN__IINNOOTTIIFFYY = 23
    VVIIRR__FFRROOMM__XXMMLL = 5
    VVIIRR__IINNTTEERRFFAACCEE__XXMMLL__IINNAACCTTIIVVEE = 1
    VVIIRR__KKEEYYCCOODDEE__SSEETT__AATTSSEETT11 = 2
    VVIIRR__KKEEYYCCOODDEE__SSEETT__AATTSSEETT22 = 3
    VVIIRR__KKEEYYCCOODDEE__SSEETT__AATTSSEETT33 = 4
    VVIIRR__KKEEYYCCOODDEE__SSEETT__LLIINNUUXX = 0
    VVIIRR__KKEEYYCCOODDEE__SSEETT__OOSSXX = 5
    VVIIRR__KKEEYYCCOODDEE__SSEETT__RRFFBB = 9
    VVIIRR__KKEEYYCCOODDEE__SSEETT__UUSSBB = 7
    VVIIRR__KKEEYYCCOODDEE__SSEETT__WWIINN3322 = 8
    VVIIRR__KKEEYYCCOODDEE__SSEETT__XXTT = 1
    VVIIRR__KKEEYYCCOODDEE__SSEETT__XXTT__KKBBDD = 6
    VVIIRR__MMEEMMOORRYY__PPHHYYSSIICCAALL = 2
    VVIIRR__MMEEMMOORRYY__VVIIRRTTUUAALL = 1
    VVIIRR__MMIIGGRRAATTEE__AABBOORRTT__OONN__EERRRROORR = 4096
    VVIIRR__MMIIGGRRAATTEE__CCHHAANNGGEE__PPRROOTTEECCTTIIOONN = 256
    VVIIRR__MMIIGGRRAATTEE__CCOOMMPPRREESSSSEEDD = 2048
    VVIIRR__MMIIGGRRAATTEE__LLIIVVEE = 1
    VVIIRR__MMIIGGRRAATTEE__NNOONN__SSHHAARREEDD__DDIISSKK = 64
    VVIIRR__MMIIGGRRAATTEE__NNOONN__SSHHAARREEDD__IINNCC = 128
    VVIIRR__MMIIGGRRAATTEE__OOFFFFLLIINNEE = 1024
    VVIIRR__MMIIGGRRAATTEE__PPAAUUSSEEDD = 32
    VVIIRR__MMIIGGRRAATTEE__PPEEEERR22PPEEEERR = 2
    VVIIRR__MMIIGGRRAATTEE__PPEERRSSIISSTT__DDEESSTT = 8
    VVIIRR__MMIIGGRRAATTEE__TTUUNNNNEELLLLEEDD = 4
    VVIIRR__MMIIGGRRAATTEE__UUNNDDEEFFIINNEE__SSOOUURRCCEE = 16
    VVIIRR__MMIIGGRRAATTEE__UUNNSSAAFFEE = 512
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__BBRRIIDDGGEE = 1
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__DDNNSS__HHOOSSTT = 10
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__DDNNSS__SSRRVV = 12
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__DDNNSS__TTXXTT = 11
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__DDOOMMAAIINN = 2
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__FFOORRWWAARRDD = 6
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__FFOORRWWAARRDD__IINNTTEERRFFAACCEE = 7
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__FFOORRWWAARRDD__PPFF = 8
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__IIPP = 3
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__IIPP__DDHHCCPP__HHOOSSTT = 4
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__IIPP__DDHHCCPP__RRAANNGGEE = 5
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__NNOONNEE = 0
    VVIIRR__NNEETTWWOORRKK__SSEECCTTIIOONN__PPOORRTTGGRROOUUPP = 9
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__AAFFFFEECCTT__CCOONNFFIIGG = 2
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__AAFFFFEECCTT__CCUURRRREENNTT = 0
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__AAFFFFEECCTT__LLIIVVEE = 1
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__CCOOMMMMAANNDD__AADDDD__FFIIRRSSTT = 4
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__CCOOMMMMAANNDD__DDEELLEETTEE = 2
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__CCOOMMMMAANNDD__MMOODDIIFFYY = 1
    VVIIRR__NNEETTWWOORRKK__UUPPDDAATTEE__CCOOMMMMAANNDD__NNOONNEE = 0
    VVIIRR__NNEETTWWOORRKK__XXMMLL__IINNAACCTTIIVVEE = 1
    VVIIRR__NNOODDEE__CCPPUU__SSTTAATTSS__AALLLL__CCPPUUSS = -1
    VVIIRR__NNOODDEE__MMEEMMOORRYY__SSTTAATTSS__AALLLL__CCEELLLLSS = -1
    VVIIRR__NNOODDEE__SSUUSSPPEENNDD__TTAARRGGEETT__DDIISSKK = 1
    VVIIRR__NNOODDEE__SSUUSSPPEENNDD__TTAARRGGEETT__HHYYBBRRIIDD = 2
    VVIIRR__NNOODDEE__SSUUSSPPEENNDD__TTAARRGGEETT__MMEEMM = 0
    VVIIRR__SSEECCRREETT__UUSSAAGGEE__TTYYPPEE__CCEEPPHH = 2
    VVIIRR__SSEECCRREETT__UUSSAAGGEE__TTYYPPEE__IISSCCSSII = 3
    VVIIRR__SSEECCRREETT__UUSSAAGGEE__TTYYPPEE__NNOONNEE = 0
    VVIIRR__SSEECCRREETT__UUSSAAGGEE__TTYYPPEE__VVOOLLUUMMEE = 1
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLDDIINNGG = 1
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLDD__NNEEWW = 0
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLDD__NNOO__OOVVEERRWWRRIITTEE = 4
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLDD__OOVVEERRWWRRIITTEE = 8
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLDD__RREEPPAAIIRR = 1
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__BBUUIILLDD__RREESSIIZZEE = 2
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__DDEEGGRRAADDEEDD = 3
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__DDEELLEETTEE__NNOORRMMAALL = 0
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__DDEELLEETTEE__ZZEERROOEEDD = 1
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__IINNAACCCCEESSSSIIBBLLEE = 4
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__IINNAACCTTIIVVEE = 0
    VVIIRR__SSTTOORRAAGGEE__PPOOOOLL__RRUUNNNNIINNGG = 2
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__BBLLOOCCKK = 1
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__CCRREEAATTEE__PPRREEAALLLLOOCC__MMEETTAADDAATTAA = 1
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__DDEELLEETTEE__NNOORRMMAALL = 0
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__DDEELLEETTEE__ZZEERROOEEDD = 1
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__DDIIRR = 2
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__FFIILLEE = 0
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__NNEETTWWOORRKK = 3
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__RREESSIIZZEE__AALLLLOOCCAATTEE = 1
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__RREESSIIZZEE__DDEELLTTAA = 2
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__RREESSIIZZEE__SSHHRRIINNKK = 4
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__BBSSII = 3
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__DDOODD = 2
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__GGUUTTMMAANNNN = 4
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__NNNNSSAA = 1
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__PPFFIITTZZNNEERR3333 = 7
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__PPFFIITTZZNNEERR77 = 6
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__RRAANNDDOOMM = 8
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__SSCCHHNNEEIIEERR = 5
    VVIIRR__SSTTOORRAAGGEE__VVOOLL__WWIIPPEE__AALLGG__ZZEERROO = 0
    VVIIRR__SSTTOORRAAGGEE__XXMMLL__IINNAACCTTIIVVEE = 1
    VVIIRR__SSTTRREEAAMM__EEVVEENNTT__EERRRROORR = 4
    VVIIRR__SSTTRREEAAMM__EEVVEENNTT__HHAANNGGUUPP = 8
    VVIIRR__SSTTRREEAAMM__EEVVEENNTT__RREEAADDAABBLLEE = 1
    VVIIRR__SSTTRREEAAMM__EEVVEENNTT__WWRRIITTAABBLLEE = 2
    VVIIRR__SSTTRREEAAMM__NNOONNBBLLOOCCKK = 1
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__BBOOOOLLEEAANN = 6
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__DDOOUUBBLLEE = 5
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__IINNTT = 1
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__LLLLOONNGG = 3
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__SSTTRRIINNGG = 7
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__SSTTRRIINNGG__OOKKAAYY = 4
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__UUIINNTT = 2
    VVIIRR__TTYYPPEEDD__PPAARRAAMM__UULLLLOONNGG = 4
    VVIIRR__VVCCPPUU__BBLLOOCCKKEEDD = 2
    VVIIRR__VVCCPPUU__OOFFFFLLIINNEE = 0
    VVIIRR__VVCCPPUU__RRUUNNNNIINNGG = 1
    VVIIRR__WWAARR__NNOO__IINNTTEERRFFAACCEE = 56
    VVIIRR__WWAARR__NNOO__NNEETTWWOORRKK = 41
    VVIIRR__WWAARR__NNOO__NNOODDEE = 51
    VVIIRR__WWAARR__NNOO__NNWWFFIILLTTEERR = 60
    VVIIRR__WWAARR__NNOO__SSEECCRREETT = 64
    VVIIRR__WWAARR__NNOO__SSTTOORRAAGGEE = 48

